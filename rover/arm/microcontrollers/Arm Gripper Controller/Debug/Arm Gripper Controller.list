
Arm Gripper Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080055b8  080055b8  000155b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005764  08005764  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005764  08005764  00015764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800576c  0800576c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800576c  0800576c  0001576c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005770  08005770  00015770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  2000006c  080057e0  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  080057e0  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f432  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022fe  00000000  00000000  0002f511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc8  00000000  00000000  00031810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000abe  00000000  00000000  000325d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f19  00000000  00000000  00033096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010bdd  00000000  00000000  00055faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d301a  00000000  00000000  00066b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042a4  00000000  00000000  00139ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0013de4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080055a0 	.word	0x080055a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	080055a0 	.word	0x080055a0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <linear_buff_flush>:
 * @returns
 * void: prints an error statement if the provided buffer pointer is NULL
 *
 */
void linear_buff_flush(linear_buffer *buff)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  // NULL check
  if (NULL == buff)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d108      	bne.n	80005cc <linear_buff_flush+0x20>
  {
	  fprintf(stderr, "ERROR: NULL buffer pointer\n");
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <linear_buff_flush+0x3c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	221b      	movs	r2, #27
 80005c2:	2101      	movs	r1, #1
 80005c4:	4809      	ldr	r0, [pc, #36]	; (80005ec <linear_buff_flush+0x40>)
 80005c6:	f004 f8ff 	bl	80047c8 <fwrite>
	  return;
 80005ca:	e00a      	b.n	80005e2 <linear_buff_flush+0x36>
  }

  // Reset the buffer struct if not NULL
  buff->curr_index = 0;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
  memset(buff->data, 0, BUFF_SIZE);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	3301      	adds	r3, #1
 80005d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f004 fa47 	bl	8004a70 <memset>
}
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000068 	.word	0x20000068
 80005ec:	080055b8 	.word	0x080055b8

080005f0 <linear_buff_add>:
 * @returns
 * void: prints an error statement if the provided buffer pointer is NULL
 *
 */
void linear_buff_add(linear_buffer *buff, char input)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	70fb      	strb	r3, [r7, #3]
  // NULL check
  if (NULL == buff)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d108      	bne.n	8000614 <linear_buff_add+0x24>
  {
	  fprintf(stderr, "ERROR: NULL buffer pointer\n");
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <linear_buff_add+0x4c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	221b      	movs	r2, #27
 800060a:	2101      	movs	r1, #1
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <linear_buff_add+0x50>)
 800060e:	f004 f8db 	bl	80047c8 <fwrite>
	  return;
 8000612:	e010      	b.n	8000636 <linear_buff_add+0x46>
  }

  // Add the input char to the buffer and increase current index of the buffer
  buff->data[buff->curr_index] = (uint8_t) input;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	461a      	mov	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4413      	add	r3, r2
 800061e:	78fa      	ldrb	r2, [r7, #3]
 8000620:	705a      	strb	r2, [r3, #1]

  if(buff->curr_index < BUFF_SIZE - 1)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2bff      	cmp	r3, #255	; 0xff
 8000628:	d005      	beq.n	8000636 <linear_buff_add+0x46>
    buff->curr_index++;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	3301      	adds	r3, #1
 8000630:	b2da      	uxtb	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	701a      	strb	r2, [r3, #0]
}
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000068 	.word	0x20000068
 8000640:	080055b8 	.word	0x080055b8

08000644 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	80fb      	strh	r3, [r7, #6]

  encoderA = HAL_GPIO_ReadPin(EA_GPIO_Port, EA_Pin);
 800064e:	2180      	movs	r1, #128	; 0x80
 8000650:	4828      	ldr	r0, [pc, #160]	; (80006f4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000652:	f001 f955 	bl	8001900 <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	461a      	mov	r2, r3
 800065a:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <HAL_GPIO_EXTI_Callback+0xb4>)
 800065c:	701a      	strb	r2, [r3, #0]
  encoderB = HAL_GPIO_ReadPin(EB_GPIO_Port, EB_Pin);
 800065e:	2140      	movs	r1, #64	; 0x40
 8000660:	4824      	ldr	r0, [pc, #144]	; (80006f4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000662:	f001 f94d 	bl	8001900 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	461a      	mov	r2, r3
 800066a:	4b24      	ldr	r3, [pc, #144]	; (80006fc <HAL_GPIO_EXTI_Callback+0xb8>)
 800066c:	701a      	strb	r2, [r3, #0]
  switch(GPIO_Pin){
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000674:	d007      	beq.n	8000686 <HAL_GPIO_EXTI_Callback+0x42>
 8000676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800067a:	dc30      	bgt.n	80006de <HAL_GPIO_EXTI_Callback+0x9a>
 800067c:	2b40      	cmp	r3, #64	; 0x40
 800067e:	d01a      	beq.n	80006b6 <HAL_GPIO_EXTI_Callback+0x72>
 8000680:	2b80      	cmp	r3, #128	; 0x80
 8000682:	d004      	beq.n	800068e <HAL_GPIO_EXTI_Callback+0x4a>
 8000684:	e02b      	b.n	80006de <HAL_GPIO_EXTI_Callback+0x9a>

    case B1_Pin:
	  printf("oh my\n");
 8000686:	481e      	ldr	r0, [pc, #120]	; (8000700 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000688:	f004 f912 	bl	80048b0 <puts>
	  break;
 800068c:	e02e      	b.n	80006ec <HAL_GPIO_EXTI_Callback+0xa8>

    case EA_Pin:
	  if (GPIO_PIN_SET == encoderA)
 800068e:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d127      	bne.n	80006e6 <HAL_GPIO_EXTI_Callback+0xa2>
	  	{
		  if (GPIO_PIN_SET == encoderB) position--;
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <HAL_GPIO_EXTI_Callback+0xb8>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d105      	bne.n	80006aa <HAL_GPIO_EXTI_Callback+0x66>
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <HAL_GPIO_EXTI_Callback+0xc0>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	4a17      	ldr	r2, [pc, #92]	; (8000704 <HAL_GPIO_EXTI_Callback+0xc0>)
 80006a6:	6013      	str	r3, [r2, #0]
		  else position++;
//		  printf("Curr position: %ld\n", position);
	  	}
	  break;
 80006a8:	e01d      	b.n	80006e6 <HAL_GPIO_EXTI_Callback+0xa2>
		  else position++;
 80006aa:	4b16      	ldr	r3, [pc, #88]	; (8000704 <HAL_GPIO_EXTI_Callback+0xc0>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	3301      	adds	r3, #1
 80006b0:	4a14      	ldr	r2, [pc, #80]	; (8000704 <HAL_GPIO_EXTI_Callback+0xc0>)
 80006b2:	6013      	str	r3, [r2, #0]
	  break;
 80006b4:	e017      	b.n	80006e6 <HAL_GPIO_EXTI_Callback+0xa2>

    case EB_Pin:
      if (GPIO_PIN_SET == encoderB)
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <HAL_GPIO_EXTI_Callback+0xb8>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d115      	bne.n	80006ea <HAL_GPIO_EXTI_Callback+0xa6>
   	  	{
   		  if (GPIO_PIN_SET == encoderA) position++;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <HAL_GPIO_EXTI_Callback+0xb4>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d105      	bne.n	80006d2 <HAL_GPIO_EXTI_Callback+0x8e>
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <HAL_GPIO_EXTI_Callback+0xc0>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	3301      	adds	r3, #1
 80006cc:	4a0d      	ldr	r2, [pc, #52]	; (8000704 <HAL_GPIO_EXTI_Callback+0xc0>)
 80006ce:	6013      	str	r3, [r2, #0]
   		  else position--;
//   		  printf("Curr position: %ld\n", position);
   	  	}
   	  break;
 80006d0:	e00b      	b.n	80006ea <HAL_GPIO_EXTI_Callback+0xa6>
   		  else position--;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <HAL_GPIO_EXTI_Callback+0xc0>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <HAL_GPIO_EXTI_Callback+0xc0>)
 80006da:	6013      	str	r3, [r2, #0]
   	  break;
 80006dc:	e005      	b.n	80006ea <HAL_GPIO_EXTI_Callback+0xa6>

    default:
      printf("what the fuuuuuuuck?");
 80006de:	480a      	ldr	r0, [pc, #40]	; (8000708 <HAL_GPIO_EXTI_Callback+0xc4>)
 80006e0:	f004 f880 	bl	80047e4 <iprintf>
      break;
 80006e4:	e002      	b.n	80006ec <HAL_GPIO_EXTI_Callback+0xa8>
	  break;
 80006e6:	bf00      	nop
 80006e8:	e000      	b.n	80006ec <HAL_GPIO_EXTI_Callback+0xa8>
   	  break;
 80006ea:	bf00      	nop
  }
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40020000 	.word	0x40020000
 80006f8:	2000036c 	.word	0x2000036c
 80006fc:	2000036d 	.word	0x2000036d
 8000700:	080055d4 	.word	0x080055d4
 8000704:	20000364 	.word	0x20000364
 8000708:	080055dc 	.word	0x080055dc

0800070c <motor_PID>:

void motor_PID(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
	int16_t error = goal - position;
 8000712:	4b48      	ldr	r3, [pc, #288]	; (8000834 <motor_PID+0x128>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	b29a      	uxth	r2, r3
 8000718:	4b47      	ldr	r3, [pc, #284]	; (8000838 <motor_PID+0x12c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	b29b      	uxth	r3, r3
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	b29b      	uxth	r3, r3
 8000722:	80fb      	strh	r3, [r7, #6]
	int16_t integral = integral_prior + error;
 8000724:	4b45      	ldr	r3, [pc, #276]	; (800083c <motor_PID+0x130>)
 8000726:	f9b3 3000 	ldrsh.w	r3, [r3]
 800072a:	b29a      	uxth	r2, r3
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	4413      	add	r3, r2
 8000730:	b29b      	uxth	r3, r3
 8000732:	81fb      	strh	r3, [r7, #14]
	int16_t derivative = error - error_prior;
 8000734:	88fa      	ldrh	r2, [r7, #6]
 8000736:	4b42      	ldr	r3, [pc, #264]	; (8000840 <motor_PID+0x134>)
 8000738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800073c:	b29b      	uxth	r3, r3
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	b29b      	uxth	r3, r3
 8000742:	80bb      	strh	r3, [r7, #4]
	int32_t output = kP*error + kI*integral + kD*derivative + bias;
 8000744:	4b3f      	ldr	r3, [pc, #252]	; (8000844 <motor_PID+0x138>)
 8000746:	f9b3 3000 	ldrsh.w	r3, [r3]
 800074a:	461a      	mov	r2, r3
 800074c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000750:	fb03 f202 	mul.w	r2, r3, r2
 8000754:	4b3c      	ldr	r3, [pc, #240]	; (8000848 <motor_PID+0x13c>)
 8000756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800075a:	4619      	mov	r1, r3
 800075c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000760:	fb01 f303 	mul.w	r3, r1, r3
 8000764:	441a      	add	r2, r3
 8000766:	4b39      	ldr	r3, [pc, #228]	; (800084c <motor_PID+0x140>)
 8000768:	f9b3 3000 	ldrsh.w	r3, [r3]
 800076c:	4619      	mov	r1, r3
 800076e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000772:	fb01 f303 	mul.w	r3, r1, r3
 8000776:	4413      	add	r3, r2
 8000778:	4a35      	ldr	r2, [pc, #212]	; (8000850 <motor_PID+0x144>)
 800077a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800077e:	4413      	add	r3, r2
 8000780:	60bb      	str	r3, [r7, #8]

	if (0 < output) HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dd06      	ble.n	8000796 <motor_PID+0x8a>
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800078e:	4831      	ldr	r0, [pc, #196]	; (8000854 <motor_PID+0x148>)
 8000790:	f001 f8ce 	bl	8001930 <HAL_GPIO_WritePin>
 8000794:	e005      	b.n	80007a2 <motor_PID+0x96>
	else HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079c:	482d      	ldr	r0, [pc, #180]	; (8000854 <motor_PID+0x148>)
 800079e:	f001 f8c7 	bl	8001930 <HAL_GPIO_WritePin>

	if (INT16_MAX <= output)
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80007a8:	4293      	cmp	r3, r2
 80007aa:	dd08      	ble.n	80007be <motor_PID+0xb2>
	{
	  integral -= error;
 80007ac:	89fa      	ldrh	r2, [r7, #14]
 80007ae:	88fb      	ldrh	r3, [r7, #6]
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	81fb      	strh	r3, [r7, #14]
	  output = INT16_MAX;
 80007b6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	e00a      	b.n	80007d4 <motor_PID+0xc8>
	}
	else if (INT16_MIN >= output)
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80007c4:	dc06      	bgt.n	80007d4 <motor_PID+0xc8>
	{
	  integral -= error;
 80007c6:	89fa      	ldrh	r2, [r7, #14]
 80007c8:	88fb      	ldrh	r3, [r7, #6]
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	81fb      	strh	r3, [r7, #14]
	  output = INT16_MIN;
 80007d0:	4b21      	ldr	r3, [pc, #132]	; (8000858 <motor_PID+0x14c>)
 80007d2:	60bb      	str	r3, [r7, #8]
	}

	error_prior = error;
 80007d4:	4a1a      	ldr	r2, [pc, #104]	; (8000840 <motor_PID+0x134>)
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	8013      	strh	r3, [r2, #0]
	integral_prior = integral;
 80007da:	4a18      	ldr	r2, [pc, #96]	; (800083c <motor_PID+0x130>)
 80007dc:	89fb      	ldrh	r3, [r7, #14]
 80007de:	8013      	strh	r3, [r2, #0]
	htim2.Instance->CCR3 = (abs(output) * htim2.Init.Period)/INT16_MAX;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	bfb8      	it	lt
 80007e6:	425b      	neglt	r3, r3
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b1c      	ldr	r3, [pc, #112]	; (800085c <motor_PID+0x150>)
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	fb03 f202 	mul.w	r2, r3, r2
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <motor_PID+0x150>)
 80007f4:	6819      	ldr	r1, [r3, #0]
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <motor_PID+0x154>)
 80007f8:	fba3 0302 	umull	r0, r3, r3, r2
 80007fc:	1ad2      	subs	r2, r2, r3
 80007fe:	0852      	lsrs	r2, r2, #1
 8000800:	4413      	add	r3, r2
 8000802:	0b9b      	lsrs	r3, r3, #14
 8000804:	63cb      	str	r3, [r1, #60]	; 0x3c
	htim2.Instance->CCR1 = (abs(output) * htim2.Init.Period)/INT16_MAX;
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	2b00      	cmp	r3, #0
 800080a:	bfb8      	it	lt
 800080c:	425b      	neglt	r3, r3
 800080e:	461a      	mov	r2, r3
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <motor_PID+0x150>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	fb03 f202 	mul.w	r2, r3, r2
 8000818:	4b10      	ldr	r3, [pc, #64]	; (800085c <motor_PID+0x150>)
 800081a:	6819      	ldr	r1, [r3, #0]
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <motor_PID+0x154>)
 800081e:	fba3 0302 	umull	r0, r3, r3, r2
 8000822:	1ad2      	subs	r2, r2, r3
 8000824:	0852      	lsrs	r2, r2, #1
 8000826:	4413      	add	r3, r2
 8000828:	0b9b      	lsrs	r3, r3, #14
 800082a:	634b      	str	r3, [r1, #52]	; 0x34
//	printf("Curr position: %ld\n", position);
//	printf("PWM output %ld\n\n", output);
}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000368 	.word	0x20000368
 8000838:	20000364 	.word	0x20000364
 800083c:	20000370 	.word	0x20000370
 8000840:	2000036e 	.word	0x2000036e
 8000844:	20000000 	.word	0x20000000
 8000848:	20000372 	.word	0x20000372
 800084c:	20000374 	.word	0x20000374
 8000850:	20000376 	.word	0x20000376
 8000854:	40020000 	.word	0x40020000
 8000858:	ffff8000 	.word	0xffff8000
 800085c:	20000088 	.word	0x20000088
 8000860:	00020005 	.word	0x00020005

08000864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000868:	f000 fca0 	bl	80011ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086c:	f000 f856 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000870:	f000 f974 	bl	8000b5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000874:	f000 f948 	bl	8000b08 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000878:	f000 f8be 	bl	80009f8 <MX_TIM2_Init>
  MX_TIM10_Init();
 800087c:	f000 f920 	bl	8000ac0 <MX_TIM10_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2, &uart_rx_buff, 1);
 8000880:	2201      	movs	r2, #1
 8000882:	491b      	ldr	r1, [pc, #108]	; (80008f0 <main+0x8c>)
 8000884:	481b      	ldr	r0, [pc, #108]	; (80008f4 <main+0x90>)
 8000886:	f002 fe74 	bl	8003572 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 800088a:	481b      	ldr	r0, [pc, #108]	; (80008f8 <main+0x94>)
 800088c:	f001 ff22 	bl	80026d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 8000890:	481a      	ldr	r0, [pc, #104]	; (80008fc <main+0x98>)
 8000892:	f001 feb7 	bl	8002604 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Init(&htim2);
 8000896:	4819      	ldr	r0, [pc, #100]	; (80008fc <main+0x98>)
 8000898:	f001 ff8c 	bl	80027b4 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800089c:	2100      	movs	r1, #0
 800089e:	4817      	ldr	r0, [pc, #92]	; (80008fc <main+0x98>)
 80008a0:	f001 ffd8 	bl	8002854 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80008a4:	2108      	movs	r1, #8
 80008a6:	4815      	ldr	r0, [pc, #84]	; (80008fc <main+0x98>)
 80008a8:	f001 ffd4 	bl	8002854 <HAL_TIM_PWM_Start>
    /* USER CODE BEGIN 3 */
//	  uint8_t result = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
//	  printf("Button Reading is: %d\n", result);
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	  if (buffer_ready)
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <main+0x9c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d016      	beq.n	80008e2 <main+0x7e>
	  {
		  fprintf(stderr, "Goal Pos: %s", rx_buffer);
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <main+0xa0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	68db      	ldr	r3, [r3, #12]
 80008ba:	4a13      	ldr	r2, [pc, #76]	; (8000908 <main+0xa4>)
 80008bc:	4913      	ldr	r1, [pc, #76]	; (800090c <main+0xa8>)
 80008be:	4618      	mov	r0, r3
 80008c0:	f003 ff06 	bl	80046d0 <fiprintf>
		  goal = atoi((char *)rx_buffer);
 80008c4:	4810      	ldr	r0, [pc, #64]	; (8000908 <main+0xa4>)
 80008c6:	f003 fdcf 	bl	8004468 <atoi>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4a10      	ldr	r2, [pc, #64]	; (8000910 <main+0xac>)
 80008ce:	6013      	str	r3, [r2, #0]
		  memset(rx_buffer, 0, BUFF_SIZE);
 80008d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008d4:	2100      	movs	r1, #0
 80008d6:	480c      	ldr	r0, [pc, #48]	; (8000908 <main+0xa4>)
 80008d8:	f004 f8ca 	bl	8004a70 <memset>
		  buffer_ready = 0;
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <main+0x9c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
	  }
	  printf("Curr position: %ld\n", position);
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <main+0xb0>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4619      	mov	r1, r3
 80008e8:	480b      	ldr	r0, [pc, #44]	; (8000918 <main+0xb4>)
 80008ea:	f003 ff7b 	bl	80047e4 <iprintf>
	  if (buffer_ready)
 80008ee:	e7dd      	b.n	80008ac <main+0x48>
 80008f0:	20000261 	.word	0x20000261
 80008f4:	20000118 	.word	0x20000118
 80008f8:	200000d0 	.word	0x200000d0
 80008fc:	20000088 	.word	0x20000088
 8000900:	20000262 	.word	0x20000262
 8000904:	20000068 	.word	0x20000068
 8000908:	20000264 	.word	0x20000264
 800090c:	080055f4 	.word	0x080055f4
 8000910:	20000368 	.word	0x20000368
 8000914:	20000364 	.word	0x20000364
 8000918:	08005604 	.word	0x08005604

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b094      	sub	sp, #80	; 0x50
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	2234      	movs	r2, #52	; 0x34
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f004 f8a0 	bl	8004a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <SystemClock_Config+0xd4>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	4a29      	ldr	r2, [pc, #164]	; (80009f0 <SystemClock_Config+0xd4>)
 800094a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094e:	6413      	str	r3, [r2, #64]	; 0x40
 8000950:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <SystemClock_Config+0xd4>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800095c:	2300      	movs	r3, #0
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	4b24      	ldr	r3, [pc, #144]	; (80009f4 <SystemClock_Config+0xd8>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000968:	4a22      	ldr	r2, [pc, #136]	; (80009f4 <SystemClock_Config+0xd8>)
 800096a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096e:	6013      	str	r3, [r2, #0]
 8000970:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <SystemClock_Config+0xd8>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800097c:	2302      	movs	r3, #2
 800097e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000980:	2301      	movs	r3, #1
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000984:	2310      	movs	r3, #16
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000988:	2302      	movs	r3, #2
 800098a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800098c:	2300      	movs	r3, #0
 800098e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000990:	2310      	movs	r3, #16
 8000992:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000994:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000998:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800099a:	2304      	movs	r3, #4
 800099c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800099e:	2302      	movs	r3, #2
 80009a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009a2:	2302      	movs	r3, #2
 80009a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 fb3c 	bl	8002028 <HAL_RCC_OscConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009b6:	f000 f9ab 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ba:	230f      	movs	r3, #15
 80009bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009be:	2302      	movs	r3, #2
 80009c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	2102      	movs	r1, #2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 ffdc 	bl	8001994 <HAL_RCC_ClockConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80009e2:	f000 f995 	bl	8000d10 <Error_Handler>
  }
}
 80009e6:	bf00      	nop
 80009e8:	3750      	adds	r7, #80	; 0x50
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40007000 	.word	0x40007000

080009f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fe:	f107 0320 	add.w	r3, r7, #32
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]
 8000a16:	615a      	str	r2, [r3, #20]
 8000a18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a1a:	4b28      	ldr	r3, [pc, #160]	; (8000abc <MX_TIM2_Init+0xc4>)
 8000a1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a22:	4b26      	ldr	r3, [pc, #152]	; (8000abc <MX_TIM2_Init+0xc4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a28:	4b24      	ldr	r3, [pc, #144]	; (8000abc <MX_TIM2_Init+0xc4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000a2e:	4b23      	ldr	r3, [pc, #140]	; (8000abc <MX_TIM2_Init+0xc4>)
 8000a30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_TIM2_Init+0xc4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_TIM2_Init+0xc4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a42:	481e      	ldr	r0, [pc, #120]	; (8000abc <MX_TIM2_Init+0xc4>)
 8000a44:	f001 feb6 	bl	80027b4 <HAL_TIM_PWM_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000a4e:	f000 f95f 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a5a:	f107 0320 	add.w	r3, r7, #32
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4816      	ldr	r0, [pc, #88]	; (8000abc <MX_TIM2_Init+0xc4>)
 8000a62:	f002 fc1b 	bl	800329c <HAL_TIMEx_MasterConfigSynchronization>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000a6c:	f000 f950 	bl	8000d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a70:	2360      	movs	r3, #96	; 0x60
 8000a72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2200      	movs	r2, #0
 8000a84:	4619      	mov	r1, r3
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <MX_TIM2_Init+0xc4>)
 8000a88:	f002 f89c 	bl	8002bc4 <HAL_TIM_PWM_ConfigChannel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000a92:	f000 f93d 	bl	8000d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2208      	movs	r2, #8
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4807      	ldr	r0, [pc, #28]	; (8000abc <MX_TIM2_Init+0xc4>)
 8000a9e:	f002 f891 	bl	8002bc4 <HAL_TIM_PWM_ConfigChannel>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000aa8:	f000 f932 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000aac:	4803      	ldr	r0, [pc, #12]	; (8000abc <MX_TIM2_Init+0xc4>)
 8000aae:	f000 f9a5 	bl	8000dfc <HAL_TIM_MspPostInit>

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000088 	.word	0x20000088

08000ac0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_TIM10_Init+0x40>)
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <MX_TIM10_Init+0x44>)
 8000ac8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 83;
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <MX_TIM10_Init+0x40>)
 8000acc:	2253      	movs	r2, #83	; 0x53
 8000ace:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_TIM10_Init+0x40>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2000;
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <MX_TIM10_Init+0x40>)
 8000ad8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000adc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_TIM10_Init+0x40>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_TIM10_Init+0x40>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_TIM10_Init+0x40>)
 8000aec:	f001 fd3a 	bl	8002564 <HAL_TIM_Base_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000af6:	f000 f90b 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200000d0 	.word	0x200000d0
 8000b04:	40014400 	.word	0x40014400

08000b08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <MX_USART2_UART_Init+0x50>)
 8000b10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b2e:	220c      	movs	r2, #12
 8000b30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b40:	f002 fc3c 	bl	80033bc <HAL_UART_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b4a:	f000 f8e1 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000118 	.word	0x20000118
 8000b58:	40004400 	.word	0x40004400

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b3d      	ldr	r3, [pc, #244]	; (8000c6c <MX_GPIO_Init+0x110>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a3c      	ldr	r2, [pc, #240]	; (8000c6c <MX_GPIO_Init+0x110>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b3a      	ldr	r3, [pc, #232]	; (8000c6c <MX_GPIO_Init+0x110>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b36      	ldr	r3, [pc, #216]	; (8000c6c <MX_GPIO_Init+0x110>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a35      	ldr	r2, [pc, #212]	; (8000c6c <MX_GPIO_Init+0x110>)
 8000b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b33      	ldr	r3, [pc, #204]	; (8000c6c <MX_GPIO_Init+0x110>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	4b2f      	ldr	r3, [pc, #188]	; (8000c6c <MX_GPIO_Init+0x110>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a2e      	ldr	r2, [pc, #184]	; (8000c6c <MX_GPIO_Init+0x110>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b2c      	ldr	r3, [pc, #176]	; (8000c6c <MX_GPIO_Init+0x110>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <MX_GPIO_Init+0x110>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a27      	ldr	r2, [pc, #156]	; (8000c6c <MX_GPIO_Init+0x110>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <MX_GPIO_Init+0x110>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be8:	4821      	ldr	r0, [pc, #132]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000bea:	f000 fea1 	bl	8001930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bf4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	481b      	ldr	r0, [pc, #108]	; (8000c74 <MX_GPIO_Init+0x118>)
 8000c06:	f000 fce7 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EB_Pin EA_Pin */
  GPIO_InitStruct.Pin = EB_Pin|EA_Pin;
 8000c0a:	23c0      	movs	r3, #192	; 0xc0
 8000c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4814      	ldr	r0, [pc, #80]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000c20:	f000 fcda 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_Pin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8000c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <MX_GPIO_Init+0x114>)
 8000c3e:	f000 fccb 	bl	80015d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	2017      	movs	r0, #23
 8000c48:	f000 fbfd 	bl	8001446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c4c:	2017      	movs	r0, #23
 8000c4e:	f000 fc16 	bl	800147e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	2028      	movs	r0, #40	; 0x28
 8000c58:	f000 fbf5 	bl	8001446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c5c:	2028      	movs	r0, #40	; 0x28
 8000c5e:	f000 fc0e 	bl	800147e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c62:	bf00      	nop
 8000c64:	3728      	adds	r7, #40	; 0x28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020000 	.word	0x40020000
 8000c74:	40020800 	.word	0x40020800

08000c78 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	linear_buff_add(&linear_buff, uart_rx_buff);
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <HAL_UART_RxCpltCallback+0x4c>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	4810      	ldr	r0, [pc, #64]	; (8000cc8 <HAL_UART_RxCpltCallback+0x50>)
 8000c88:	f7ff fcb2 	bl	80005f0 <linear_buff_add>
	if ('\n' == uart_rx_buff){
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <HAL_UART_RxCpltCallback+0x4c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b0a      	cmp	r3, #10
 8000c92:	d10e      	bne.n	8000cb2 <HAL_UART_RxCpltCallback+0x3a>
		memcpy(rx_buffer, linear_buff.data, BUFF_SIZE);
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <HAL_UART_RxCpltCallback+0x54>)
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <HAL_UART_RxCpltCallback+0x50>)
 8000c98:	4610      	mov	r0, r2
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f003 ff60 	bl	8004b66 <memcpy>
		buffer_ready = 1;
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_UART_RxCpltCallback+0x58>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	701a      	strb	r2, [r3, #0]
		linear_buff_flush(&linear_buff);
 8000cac:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <HAL_UART_RxCpltCallback+0x50>)
 8000cae:	f7ff fc7d 	bl	80005ac <linear_buff_flush>
	}
	HAL_UART_Receive_IT(&huart2, &uart_rx_buff, 1);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4903      	ldr	r1, [pc, #12]	; (8000cc4 <HAL_UART_RxCpltCallback+0x4c>)
 8000cb6:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <HAL_UART_RxCpltCallback+0x5c>)
 8000cb8:	f002 fc5b 	bl	8003572 <HAL_UART_Receive_IT>
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000261 	.word	0x20000261
 8000cc8:	20000160 	.word	0x20000160
 8000ccc:	20000264 	.word	0x20000264
 8000cd0:	20000262 	.word	0x20000262
 8000cd4:	20000118 	.word	0x20000118

08000cd8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	motor_PID();
 8000ce0:	f7ff fd14 	bl	800070c <motor_PID>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <__io_putchar>:

// printf Implementation
PUTCHAR_PROTOTYPE
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);
 8000cf4:	1d39      	adds	r1, r7, #4
 8000cf6:	2364      	movs	r3, #100	; 0x64
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	4804      	ldr	r0, [pc, #16]	; (8000d0c <__io_putchar+0x20>)
 8000cfc:	f002 fbae 	bl	800345c <HAL_UART_Transmit>

  return ch;
 8000d00:	687b      	ldr	r3, [r7, #4]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000118 	.word	0x20000118

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x8>
	...

08000d1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d5a:	2007      	movs	r0, #7
 8000d5c:	f000 fb68 	bl	8001430 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800

08000d6c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d7c:	d10d      	bne.n	8000d9a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	4a08      	ldr	r2, [pc, #32]	; (8000da8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800

08000dac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <HAL_TIM_Base_MspInit+0x48>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d115      	bne.n	8000dea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <HAL_TIM_Base_MspInit+0x4c>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	4a0c      	ldr	r2, [pc, #48]	; (8000df8 <HAL_TIM_Base_MspInit+0x4c>)
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_TIM_Base_MspInit+0x4c>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2019      	movs	r0, #25
 8000de0:	f000 fb31 	bl	8001446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000de4:	2019      	movs	r0, #25
 8000de6:	f000 fb4a 	bl	800147e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40014400 	.word	0x40014400
 8000df8:	40023800 	.word	0x40023800

08000dfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e1c:	d13c      	bne.n	8000e98 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <HAL_TIM_MspPostInit+0xa4>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a1e      	ldr	r2, [pc, #120]	; (8000ea0 <HAL_TIM_MspPostInit+0xa4>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <HAL_TIM_MspPostInit+0xa4>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_TIM_MspPostInit+0xa4>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a17      	ldr	r2, [pc, #92]	; (8000ea0 <HAL_TIM_MspPostInit+0xa4>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_TIM_MspPostInit+0xa4>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = LD2_Pin;
 8000e56:	2320      	movs	r3, #32
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e66:	2301      	movs	r3, #1
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <HAL_TIM_MspPostInit+0xa8>)
 8000e72:	f000 fbb1 	bl	80015d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_Pin;
 8000e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <HAL_TIM_MspPostInit+0xac>)
 8000e94:	f000 fba0 	bl	80015d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e98:	bf00      	nop
 8000e9a:	3728      	adds	r7, #40	; 0x28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	40020400 	.word	0x40020400

08000eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a1d      	ldr	r2, [pc, #116]	; (8000f40 <HAL_UART_MspInit+0x94>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d133      	bne.n	8000f36 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <HAL_UART_MspInit+0x98>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	4a1b      	ldr	r2, [pc, #108]	; (8000f44 <HAL_UART_MspInit+0x98>)
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000edc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <HAL_UART_MspInit+0x98>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_UART_MspInit+0x98>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <HAL_UART_MspInit+0x98>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_UART_MspInit+0x98>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f06:	230c      	movs	r3, #12
 8000f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f12:	2303      	movs	r3, #3
 8000f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f16:	2307      	movs	r3, #7
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4809      	ldr	r0, [pc, #36]	; (8000f48 <HAL_UART_MspInit+0x9c>)
 8000f22:	f000 fb59 	bl	80015d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2026      	movs	r0, #38	; 0x26
 8000f2c:	f000 fa8b 	bl	8001446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f30:	2026      	movs	r0, #38	; 0x26
 8000f32:	f000 faa4 	bl	800147e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f36:	bf00      	nop
 8000f38:	3728      	adds	r7, #40	; 0x28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40004400 	.word	0x40004400
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020000 	.word	0x40020000

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f50:	e7fe      	b.n	8000f50 <NMI_Handler+0x4>

08000f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <MemManage_Handler+0x4>

08000f5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <BusFault_Handler+0x4>

08000f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <UsageFault_Handler+0x4>

08000f6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f98:	f000 f95a 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_Pin);
 8000fa4:	2040      	movs	r0, #64	; 0x40
 8000fa6:	f000 fcdd 	bl	8001964 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EA_Pin);
 8000faa:	2080      	movs	r0, #128	; 0x80
 8000fac:	f000 fcda 	bl	8001964 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000fba:	f001 fd13 	bl	80029e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200000d0 	.word	0x200000d0

08000fc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <USART2_IRQHandler+0x10>)
 8000fce:	f002 faf5 	bl	80035bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000118 	.word	0x20000118

08000fdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000fe0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fe4:	f000 fcbe 	bl	8001964 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e00a      	b.n	8001014 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ffe:	f3af 8000 	nop.w
 8001002:	4601      	mov	r1, r0
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	60ba      	str	r2, [r7, #8]
 800100a:	b2ca      	uxtb	r2, r1
 800100c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3301      	adds	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	429a      	cmp	r2, r3
 800101a:	dbf0      	blt.n	8000ffe <_read+0x12>
  }

  return len;
 800101c:	687b      	ldr	r3, [r7, #4]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	e009      	b.n	800104c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	60ba      	str	r2, [r7, #8]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fe53 	bl	8000cec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3301      	adds	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	429a      	cmp	r2, r3
 8001052:	dbf1      	blt.n	8001038 <_write+0x12>
  }
  return len;
 8001054:	687b      	ldr	r3, [r7, #4]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <_close>:

int _close(int file)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001086:	605a      	str	r2, [r3, #4]
  return 0;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <_isatty>:

int _isatty(int file)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d0:	4a14      	ldr	r2, [pc, #80]	; (8001124 <_sbrk+0x5c>)
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <_sbrk+0x60>)
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <_sbrk+0x64>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <_sbrk+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d207      	bcs.n	8001108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f8:	f003 fd08 	bl	8004b0c <__errno>
 80010fc:	4603      	mov	r3, r0
 80010fe:	220c      	movs	r2, #12
 8001100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	e009      	b.n	800111c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <_sbrk+0x64>)
 8001118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111a:	68fb      	ldr	r3, [r7, #12]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20020000 	.word	0x20020000
 8001128:	00000400 	.word	0x00000400
 800112c:	20000378 	.word	0x20000378
 8001130:	200004d0 	.word	0x200004d0

08001134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <SystemInit+0x20>)
 800113a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <SystemInit+0x20>)
 8001140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001158:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001190 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800115c:	f7ff ffea 	bl	8001134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001162:	490d      	ldr	r1, [pc, #52]	; (8001198 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001164:	4a0d      	ldr	r2, [pc, #52]	; (800119c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001178:	4c0a      	ldr	r4, [pc, #40]	; (80011a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001186:	f003 fcc7 	bl	8004b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118a:	f7ff fb6b 	bl	8000864 <main>
  bx  lr    
 800118e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001190:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001198:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800119c:	08005774 	.word	0x08005774
  ldr r2, =_sbss
 80011a0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80011a4:	200004cc 	.word	0x200004cc

080011a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC_IRQHandler>
	...

080011ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0d      	ldr	r2, [pc, #52]	; (80011ec <HAL_Init+0x40>)
 80011b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_Init+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <HAL_Init+0x40>)
 80011c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a07      	ldr	r2, [pc, #28]	; (80011ec <HAL_Init+0x40>)
 80011ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f000 f92b 	bl	8001430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011da:	2000      	movs	r0, #0
 80011dc:	f000 f808 	bl	80011f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e0:	f7ff fd9c 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023c00 	.word	0x40023c00

080011f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_InitTick+0x54>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_InitTick+0x58>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001206:	fbb3 f3f1 	udiv	r3, r3, r1
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f943 	bl	800149a <HAL_SYSTICK_Config>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e00e      	b.n	800123c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d80a      	bhi.n	800123a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f000 f90b 	bl	8001446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001230:	4a06      	ldr	r2, [pc, #24]	; (800124c <HAL_InitTick+0x5c>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000004 	.word	0x20000004
 8001248:	2000000c 	.word	0x2000000c
 800124c:	20000008 	.word	0x20000008

08001250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_IncTick+0x20>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x24>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <HAL_IncTick+0x24>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	2000000c 	.word	0x2000000c
 8001274:	2000037c 	.word	0x2000037c

08001278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return uwTick;
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <HAL_GetTick+0x14>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	2000037c 	.word	0x2000037c

08001290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ac:	4013      	ands	r3, r2
 80012ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c2:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	60d3      	str	r3, [r2, #12]
}
 80012c8:	bf00      	nop
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <__NVIC_GetPriorityGrouping+0x18>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	f003 0307 	and.w	r3, r3, #7
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	2b00      	cmp	r3, #0
 8001304:	db0b      	blt.n	800131e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	f003 021f 	and.w	r2, r3, #31
 800130c:	4907      	ldr	r1, [pc, #28]	; (800132c <__NVIC_EnableIRQ+0x38>)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	095b      	lsrs	r3, r3, #5
 8001314:	2001      	movs	r0, #1
 8001316:	fa00 f202 	lsl.w	r2, r0, r2
 800131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000e100 	.word	0xe000e100

08001330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	db0a      	blt.n	800135a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	490c      	ldr	r1, [pc, #48]	; (800137c <__NVIC_SetPriority+0x4c>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	0112      	lsls	r2, r2, #4
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	440b      	add	r3, r1
 8001354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001358:	e00a      	b.n	8001370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4908      	ldr	r1, [pc, #32]	; (8001380 <__NVIC_SetPriority+0x50>)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	3b04      	subs	r3, #4
 8001368:	0112      	lsls	r2, r2, #4
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	440b      	add	r3, r1
 800136e:	761a      	strb	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000e100 	.word	0xe000e100
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f1c3 0307 	rsb	r3, r3, #7
 800139e:	2b04      	cmp	r3, #4
 80013a0:	bf28      	it	cs
 80013a2:	2304      	movcs	r3, #4
 80013a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3304      	adds	r3, #4
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d902      	bls.n	80013b4 <NVIC_EncodePriority+0x30>
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3b03      	subs	r3, #3
 80013b2:	e000      	b.n	80013b6 <NVIC_EncodePriority+0x32>
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	401a      	ands	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	43d9      	mvns	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	4313      	orrs	r3, r2
         );
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013fc:	d301      	bcc.n	8001402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fe:	2301      	movs	r3, #1
 8001400:	e00f      	b.n	8001422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <SysTick_Config+0x40>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140a:	210f      	movs	r1, #15
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
 8001410:	f7ff ff8e 	bl	8001330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001414:	4b05      	ldr	r3, [pc, #20]	; (800142c <SysTick_Config+0x40>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <SysTick_Config+0x40>)
 800141c:	2207      	movs	r2, #7
 800141e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	e000e010 	.word	0xe000e010

08001430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ff29 	bl	8001290 <__NVIC_SetPriorityGrouping>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001446:	b580      	push	{r7, lr}
 8001448:	b086      	sub	sp, #24
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001458:	f7ff ff3e 	bl	80012d8 <__NVIC_GetPriorityGrouping>
 800145c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	6978      	ldr	r0, [r7, #20]
 8001464:	f7ff ff8e 	bl	8001384 <NVIC_EncodePriority>
 8001468:	4602      	mov	r2, r0
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff5d 	bl	8001330 <__NVIC_SetPriority>
}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff31 	bl	80012f4 <__NVIC_EnableIRQ>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ffa2 	bl	80013ec <SysTick_Config>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b084      	sub	sp, #16
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014c0:	f7ff feda 	bl	8001278 <HAL_GetTick>
 80014c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d008      	beq.n	80014e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2280      	movs	r2, #128	; 0x80
 80014d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e052      	b.n	800158a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0216 	bic.w	r2, r2, #22
 80014f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	695a      	ldr	r2, [r3, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001502:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	2b00      	cmp	r3, #0
 800150a:	d103      	bne.n	8001514 <HAL_DMA_Abort+0x62>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001510:	2b00      	cmp	r3, #0
 8001512:	d007      	beq.n	8001524 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0208 	bic.w	r2, r2, #8
 8001522:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0201 	bic.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001534:	e013      	b.n	800155e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001536:	f7ff fe9f 	bl	8001278 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b05      	cmp	r3, #5
 8001542:	d90c      	bls.n	800155e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2220      	movs	r2, #32
 8001548:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2203      	movs	r2, #3
 800154e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e015      	b.n	800158a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1e4      	bne.n	8001536 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001570:	223f      	movs	r2, #63	; 0x3f
 8001572:	409a      	lsls	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d004      	beq.n	80015b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2280      	movs	r2, #128	; 0x80
 80015aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e00c      	b.n	80015ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2205      	movs	r2, #5
 80015b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0201 	bic.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
	...

080015d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	; 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	e165      	b.n	80018c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015f4:	2201      	movs	r2, #1
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	429a      	cmp	r2, r3
 800160e:	f040 8154 	bne.w	80018ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	2b01      	cmp	r3, #1
 800161c:	d005      	beq.n	800162a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001626:	2b02      	cmp	r3, #2
 8001628:	d130      	bne.n	800168c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	2203      	movs	r2, #3
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	68da      	ldr	r2, [r3, #12]
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001660:	2201      	movs	r2, #1
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	091b      	lsrs	r3, r3, #4
 8001676:	f003 0201 	and.w	r2, r3, #1
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	2b03      	cmp	r3, #3
 8001696:	d017      	beq.n	80016c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	2203      	movs	r2, #3
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d123      	bne.n	800171c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	08da      	lsrs	r2, r3, #3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3208      	adds	r2, #8
 80016dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	220f      	movs	r2, #15
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	08da      	lsrs	r2, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3208      	adds	r2, #8
 8001716:	69b9      	ldr	r1, [r7, #24]
 8001718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0203 	and.w	r2, r3, #3
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 80ae 	beq.w	80018ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b5d      	ldr	r3, [pc, #372]	; (80018d8 <HAL_GPIO_Init+0x300>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	4a5c      	ldr	r2, [pc, #368]	; (80018d8 <HAL_GPIO_Init+0x300>)
 8001768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800176c:	6453      	str	r3, [r2, #68]	; 0x44
 800176e:	4b5a      	ldr	r3, [pc, #360]	; (80018d8 <HAL_GPIO_Init+0x300>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800177a:	4a58      	ldr	r2, [pc, #352]	; (80018dc <HAL_GPIO_Init+0x304>)
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	089b      	lsrs	r3, r3, #2
 8001780:	3302      	adds	r3, #2
 8001782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	220f      	movs	r2, #15
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4f      	ldr	r2, [pc, #316]	; (80018e0 <HAL_GPIO_Init+0x308>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d025      	beq.n	80017f2 <HAL_GPIO_Init+0x21a>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4e      	ldr	r2, [pc, #312]	; (80018e4 <HAL_GPIO_Init+0x30c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d01f      	beq.n	80017ee <HAL_GPIO_Init+0x216>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4d      	ldr	r2, [pc, #308]	; (80018e8 <HAL_GPIO_Init+0x310>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d019      	beq.n	80017ea <HAL_GPIO_Init+0x212>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4c      	ldr	r2, [pc, #304]	; (80018ec <HAL_GPIO_Init+0x314>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d013      	beq.n	80017e6 <HAL_GPIO_Init+0x20e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4b      	ldr	r2, [pc, #300]	; (80018f0 <HAL_GPIO_Init+0x318>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d00d      	beq.n	80017e2 <HAL_GPIO_Init+0x20a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4a      	ldr	r2, [pc, #296]	; (80018f4 <HAL_GPIO_Init+0x31c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d007      	beq.n	80017de <HAL_GPIO_Init+0x206>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a49      	ldr	r2, [pc, #292]	; (80018f8 <HAL_GPIO_Init+0x320>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d101      	bne.n	80017da <HAL_GPIO_Init+0x202>
 80017d6:	2306      	movs	r3, #6
 80017d8:	e00c      	b.n	80017f4 <HAL_GPIO_Init+0x21c>
 80017da:	2307      	movs	r3, #7
 80017dc:	e00a      	b.n	80017f4 <HAL_GPIO_Init+0x21c>
 80017de:	2305      	movs	r3, #5
 80017e0:	e008      	b.n	80017f4 <HAL_GPIO_Init+0x21c>
 80017e2:	2304      	movs	r3, #4
 80017e4:	e006      	b.n	80017f4 <HAL_GPIO_Init+0x21c>
 80017e6:	2303      	movs	r3, #3
 80017e8:	e004      	b.n	80017f4 <HAL_GPIO_Init+0x21c>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e002      	b.n	80017f4 <HAL_GPIO_Init+0x21c>
 80017ee:	2301      	movs	r3, #1
 80017f0:	e000      	b.n	80017f4 <HAL_GPIO_Init+0x21c>
 80017f2:	2300      	movs	r3, #0
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	f002 0203 	and.w	r2, r2, #3
 80017fa:	0092      	lsls	r2, r2, #2
 80017fc:	4093      	lsls	r3, r2
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001804:	4935      	ldr	r1, [pc, #212]	; (80018dc <HAL_GPIO_Init+0x304>)
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	089b      	lsrs	r3, r3, #2
 800180a:	3302      	adds	r3, #2
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001812:	4b3a      	ldr	r3, [pc, #232]	; (80018fc <HAL_GPIO_Init+0x324>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001836:	4a31      	ldr	r2, [pc, #196]	; (80018fc <HAL_GPIO_Init+0x324>)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800183c:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <HAL_GPIO_Init+0x324>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001860:	4a26      	ldr	r2, [pc, #152]	; (80018fc <HAL_GPIO_Init+0x324>)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001866:	4b25      	ldr	r3, [pc, #148]	; (80018fc <HAL_GPIO_Init+0x324>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	43db      	mvns	r3, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800188a:	4a1c      	ldr	r2, [pc, #112]	; (80018fc <HAL_GPIO_Init+0x324>)
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001890:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <HAL_GPIO_Init+0x324>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018b4:	4a11      	ldr	r2, [pc, #68]	; (80018fc <HAL_GPIO_Init+0x324>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3301      	adds	r3, #1
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	2b0f      	cmp	r3, #15
 80018c4:	f67f ae96 	bls.w	80015f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018c8:	bf00      	nop
 80018ca:	bf00      	nop
 80018cc:	3724      	adds	r7, #36	; 0x24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40013800 	.word	0x40013800
 80018e0:	40020000 	.word	0x40020000
 80018e4:	40020400 	.word	0x40020400
 80018e8:	40020800 	.word	0x40020800
 80018ec:	40020c00 	.word	0x40020c00
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40021400 	.word	0x40021400
 80018f8:	40021800 	.word	0x40021800
 80018fc:	40013c00 	.word	0x40013c00

08001900 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	887b      	ldrh	r3, [r7, #2]
 8001912:	4013      	ands	r3, r2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	e001      	b.n	8001922 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]
 800193c:	4613      	mov	r3, r2
 800193e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001940:	787b      	ldrb	r3, [r7, #1]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001946:	887a      	ldrh	r2, [r7, #2]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800194c:	e003      	b.n	8001956 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800194e:	887b      	ldrh	r3, [r7, #2]
 8001950:	041a      	lsls	r2, r3, #16
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	619a      	str	r2, [r3, #24]
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001970:	695a      	ldr	r2, [r3, #20]
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	4013      	ands	r3, r2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d006      	beq.n	8001988 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800197a:	4a05      	ldr	r2, [pc, #20]	; (8001990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800197c:	88fb      	ldrh	r3, [r7, #6]
 800197e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fe5e 	bl	8000644 <HAL_GPIO_EXTI_Callback>
  }
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40013c00 	.word	0x40013c00

08001994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0cc      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019a8:	4b68      	ldr	r3, [pc, #416]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d90c      	bls.n	80019d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b65      	ldr	r3, [pc, #404]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b63      	ldr	r3, [pc, #396]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0b8      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d020      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019e8:	4b59      	ldr	r3, [pc, #356]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	4a58      	ldr	r2, [pc, #352]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a00:	4b53      	ldr	r3, [pc, #332]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	4a52      	ldr	r2, [pc, #328]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a0c:	4b50      	ldr	r3, [pc, #320]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	494d      	ldr	r1, [pc, #308]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d044      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d107      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	4b47      	ldr	r3, [pc, #284]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d119      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e07f      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d003      	beq.n	8001a52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a52:	4b3f      	ldr	r3, [pc, #252]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d109      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e06f      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a62:	4b3b      	ldr	r3, [pc, #236]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e067      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a72:	4b37      	ldr	r3, [pc, #220]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f023 0203 	bic.w	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4934      	ldr	r1, [pc, #208]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a84:	f7ff fbf8 	bl	8001278 <HAL_GetTick>
 8001a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8a:	e00a      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8c:	f7ff fbf4 	bl	8001278 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e04f      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 020c 	and.w	r2, r3, #12
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d1eb      	bne.n	8001a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 030f 	and.w	r3, r3, #15
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d20c      	bcs.n	8001adc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e032      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d008      	beq.n	8001afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae8:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	4916      	ldr	r1, [pc, #88]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d009      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	490e      	ldr	r1, [pc, #56]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b1a:	f000 f855 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	490a      	ldr	r1, [pc, #40]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001b2c:	5ccb      	ldrb	r3, [r1, r3]
 8001b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b32:	4a09      	ldr	r2, [pc, #36]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fb58 	bl	80011f0 <HAL_InitTick>

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023c00 	.word	0x40023c00
 8001b50:	40023800 	.word	0x40023800
 8001b54:	08005618 	.word	0x08005618
 8001b58:	20000004 	.word	0x20000004
 8001b5c:	20000008 	.word	0x20000008

08001b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b66:	681b      	ldr	r3, [r3, #0]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000004 	.word	0x20000004

08001b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b7c:	f7ff fff0 	bl	8001b60 <HAL_RCC_GetHCLKFreq>
 8001b80:	4602      	mov	r2, r0
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	0a9b      	lsrs	r3, r3, #10
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	4903      	ldr	r1, [pc, #12]	; (8001b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b8e:	5ccb      	ldrb	r3, [r1, r3]
 8001b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	08005628 	.word	0x08005628

08001ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ba4:	f7ff ffdc 	bl	8001b60 <HAL_RCC_GetHCLKFreq>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	0b5b      	lsrs	r3, r3, #13
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	4903      	ldr	r1, [pc, #12]	; (8001bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bb6:	5ccb      	ldrb	r3, [r1, r3]
 8001bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	08005628 	.word	0x08005628

08001bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bcc:	b0ae      	sub	sp, #184	; 0xb8
 8001bce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bee:	4bcb      	ldr	r3, [pc, #812]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	2b0c      	cmp	r3, #12
 8001bf8:	f200 8206 	bhi.w	8002008 <HAL_RCC_GetSysClockFreq+0x440>
 8001bfc:	a201      	add	r2, pc, #4	; (adr r2, 8001c04 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c02:	bf00      	nop
 8001c04:	08001c39 	.word	0x08001c39
 8001c08:	08002009 	.word	0x08002009
 8001c0c:	08002009 	.word	0x08002009
 8001c10:	08002009 	.word	0x08002009
 8001c14:	08001c41 	.word	0x08001c41
 8001c18:	08002009 	.word	0x08002009
 8001c1c:	08002009 	.word	0x08002009
 8001c20:	08002009 	.word	0x08002009
 8001c24:	08001c49 	.word	0x08001c49
 8001c28:	08002009 	.word	0x08002009
 8001c2c:	08002009 	.word	0x08002009
 8001c30:	08002009 	.word	0x08002009
 8001c34:	08001e39 	.word	0x08001e39
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c38:	4bb9      	ldr	r3, [pc, #740]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001c3e:	e1e7      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c40:	4bb8      	ldr	r3, [pc, #736]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001c42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c46:	e1e3      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c48:	4bb4      	ldr	r3, [pc, #720]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c54:	4bb1      	ldr	r3, [pc, #708]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d071      	beq.n	8001d44 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c60:	4bae      	ldr	r3, [pc, #696]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	099b      	lsrs	r3, r3, #6
 8001c66:	2200      	movs	r2, #0
 8001c68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001c6c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001c70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001c82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001c86:	4622      	mov	r2, r4
 8001c88:	462b      	mov	r3, r5
 8001c8a:	f04f 0000 	mov.w	r0, #0
 8001c8e:	f04f 0100 	mov.w	r1, #0
 8001c92:	0159      	lsls	r1, r3, #5
 8001c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c98:	0150      	lsls	r0, r2, #5
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	1a51      	subs	r1, r2, r1
 8001ca2:	6439      	str	r1, [r7, #64]	; 0x40
 8001ca4:	4629      	mov	r1, r5
 8001ca6:	eb63 0301 	sbc.w	r3, r3, r1
 8001caa:	647b      	str	r3, [r7, #68]	; 0x44
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001cb8:	4649      	mov	r1, r9
 8001cba:	018b      	lsls	r3, r1, #6
 8001cbc:	4641      	mov	r1, r8
 8001cbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cc2:	4641      	mov	r1, r8
 8001cc4:	018a      	lsls	r2, r1, #6
 8001cc6:	4641      	mov	r1, r8
 8001cc8:	1a51      	subs	r1, r2, r1
 8001cca:	63b9      	str	r1, [r7, #56]	; 0x38
 8001ccc:	4649      	mov	r1, r9
 8001cce:	eb63 0301 	sbc.w	r3, r3, r1
 8001cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001ce0:	4649      	mov	r1, r9
 8001ce2:	00cb      	lsls	r3, r1, #3
 8001ce4:	4641      	mov	r1, r8
 8001ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001cea:	4641      	mov	r1, r8
 8001cec:	00ca      	lsls	r2, r1, #3
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	4622      	mov	r2, r4
 8001cf6:	189b      	adds	r3, r3, r2
 8001cf8:	633b      	str	r3, [r7, #48]	; 0x30
 8001cfa:	462b      	mov	r3, r5
 8001cfc:	460a      	mov	r2, r1
 8001cfe:	eb42 0303 	adc.w	r3, r2, r3
 8001d02:	637b      	str	r3, [r7, #52]	; 0x34
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d10:	4629      	mov	r1, r5
 8001d12:	024b      	lsls	r3, r1, #9
 8001d14:	4621      	mov	r1, r4
 8001d16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d1a:	4621      	mov	r1, r4
 8001d1c:	024a      	lsls	r2, r1, #9
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
 8001d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d26:	2200      	movs	r2, #0
 8001d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001d2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001d30:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001d34:	f7fe fabc 	bl	80002b0 <__aeabi_uldivmod>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d42:	e067      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d44:	4b75      	ldr	r3, [pc, #468]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	099b      	lsrs	r3, r3, #6
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d50:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001d54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d5e:	2300      	movs	r3, #0
 8001d60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d62:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001d66:	4622      	mov	r2, r4
 8001d68:	462b      	mov	r3, r5
 8001d6a:	f04f 0000 	mov.w	r0, #0
 8001d6e:	f04f 0100 	mov.w	r1, #0
 8001d72:	0159      	lsls	r1, r3, #5
 8001d74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d78:	0150      	lsls	r0, r2, #5
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4621      	mov	r1, r4
 8001d80:	1a51      	subs	r1, r2, r1
 8001d82:	62b9      	str	r1, [r7, #40]	; 0x28
 8001d84:	4629      	mov	r1, r5
 8001d86:	eb63 0301 	sbc.w	r3, r3, r1
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	f04f 0300 	mov.w	r3, #0
 8001d94:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001d98:	4649      	mov	r1, r9
 8001d9a:	018b      	lsls	r3, r1, #6
 8001d9c:	4641      	mov	r1, r8
 8001d9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001da2:	4641      	mov	r1, r8
 8001da4:	018a      	lsls	r2, r1, #6
 8001da6:	4641      	mov	r1, r8
 8001da8:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dac:	4649      	mov	r1, r9
 8001dae:	eb63 0b01 	sbc.w	fp, r3, r1
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001dbe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001dc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001dc6:	4692      	mov	sl, r2
 8001dc8:	469b      	mov	fp, r3
 8001dca:	4623      	mov	r3, r4
 8001dcc:	eb1a 0303 	adds.w	r3, sl, r3
 8001dd0:	623b      	str	r3, [r7, #32]
 8001dd2:	462b      	mov	r3, r5
 8001dd4:	eb4b 0303 	adc.w	r3, fp, r3
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001de6:	4629      	mov	r1, r5
 8001de8:	028b      	lsls	r3, r1, #10
 8001dea:	4621      	mov	r1, r4
 8001dec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001df0:	4621      	mov	r1, r4
 8001df2:	028a      	lsls	r2, r1, #10
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	673b      	str	r3, [r7, #112]	; 0x70
 8001e00:	677a      	str	r2, [r7, #116]	; 0x74
 8001e02:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001e06:	f7fe fa53 	bl	80002b0 <__aeabi_uldivmod>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4613      	mov	r3, r2
 8001e10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e14:	4b41      	ldr	r3, [pc, #260]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	0c1b      	lsrs	r3, r3, #16
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	3301      	adds	r3, #1
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001e26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001e2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e36:	e0eb      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e38:	4b38      	ldr	r3, [pc, #224]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e44:	4b35      	ldr	r3, [pc, #212]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d06b      	beq.n	8001f28 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e50:	4b32      	ldr	r3, [pc, #200]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	099b      	lsrs	r3, r3, #6
 8001e56:	2200      	movs	r2, #0
 8001e58:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001e5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e62:	663b      	str	r3, [r7, #96]	; 0x60
 8001e64:	2300      	movs	r3, #0
 8001e66:	667b      	str	r3, [r7, #100]	; 0x64
 8001e68:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001e6c:	4622      	mov	r2, r4
 8001e6e:	462b      	mov	r3, r5
 8001e70:	f04f 0000 	mov.w	r0, #0
 8001e74:	f04f 0100 	mov.w	r1, #0
 8001e78:	0159      	lsls	r1, r3, #5
 8001e7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e7e:	0150      	lsls	r0, r2, #5
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4621      	mov	r1, r4
 8001e86:	1a51      	subs	r1, r2, r1
 8001e88:	61b9      	str	r1, [r7, #24]
 8001e8a:	4629      	mov	r1, r5
 8001e8c:	eb63 0301 	sbc.w	r3, r3, r1
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001e9e:	4659      	mov	r1, fp
 8001ea0:	018b      	lsls	r3, r1, #6
 8001ea2:	4651      	mov	r1, sl
 8001ea4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ea8:	4651      	mov	r1, sl
 8001eaa:	018a      	lsls	r2, r1, #6
 8001eac:	4651      	mov	r1, sl
 8001eae:	ebb2 0801 	subs.w	r8, r2, r1
 8001eb2:	4659      	mov	r1, fp
 8001eb4:	eb63 0901 	sbc.w	r9, r3, r1
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ec4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ec8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ecc:	4690      	mov	r8, r2
 8001ece:	4699      	mov	r9, r3
 8001ed0:	4623      	mov	r3, r4
 8001ed2:	eb18 0303 	adds.w	r3, r8, r3
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	462b      	mov	r3, r5
 8001eda:	eb49 0303 	adc.w	r3, r9, r3
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001eec:	4629      	mov	r1, r5
 8001eee:	024b      	lsls	r3, r1, #9
 8001ef0:	4621      	mov	r1, r4
 8001ef2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	024a      	lsls	r2, r1, #9
 8001efa:	4610      	mov	r0, r2
 8001efc:	4619      	mov	r1, r3
 8001efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f02:	2200      	movs	r2, #0
 8001f04:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f06:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001f08:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f0c:	f7fe f9d0 	bl	80002b0 <__aeabi_uldivmod>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4613      	mov	r3, r2
 8001f16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f1a:	e065      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x420>
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	00f42400 	.word	0x00f42400
 8001f24:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f28:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <HAL_RCC_GetSysClockFreq+0x458>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	099b      	lsrs	r3, r3, #6
 8001f2e:	2200      	movs	r2, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	4611      	mov	r1, r2
 8001f34:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f38:	653b      	str	r3, [r7, #80]	; 0x50
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	657b      	str	r3, [r7, #84]	; 0x54
 8001f3e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001f42:	4642      	mov	r2, r8
 8001f44:	464b      	mov	r3, r9
 8001f46:	f04f 0000 	mov.w	r0, #0
 8001f4a:	f04f 0100 	mov.w	r1, #0
 8001f4e:	0159      	lsls	r1, r3, #5
 8001f50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f54:	0150      	lsls	r0, r2, #5
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4641      	mov	r1, r8
 8001f5c:	1a51      	subs	r1, r2, r1
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	4649      	mov	r1, r9
 8001f62:	eb63 0301 	sbc.w	r3, r3, r1
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001f74:	4659      	mov	r1, fp
 8001f76:	018b      	lsls	r3, r1, #6
 8001f78:	4651      	mov	r1, sl
 8001f7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f7e:	4651      	mov	r1, sl
 8001f80:	018a      	lsls	r2, r1, #6
 8001f82:	4651      	mov	r1, sl
 8001f84:	1a54      	subs	r4, r2, r1
 8001f86:	4659      	mov	r1, fp
 8001f88:	eb63 0501 	sbc.w	r5, r3, r1
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	00eb      	lsls	r3, r5, #3
 8001f96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f9a:	00e2      	lsls	r2, r4, #3
 8001f9c:	4614      	mov	r4, r2
 8001f9e:	461d      	mov	r5, r3
 8001fa0:	4643      	mov	r3, r8
 8001fa2:	18e3      	adds	r3, r4, r3
 8001fa4:	603b      	str	r3, [r7, #0]
 8001fa6:	464b      	mov	r3, r9
 8001fa8:	eb45 0303 	adc.w	r3, r5, r3
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fba:	4629      	mov	r1, r5
 8001fbc:	028b      	lsls	r3, r1, #10
 8001fbe:	4621      	mov	r1, r4
 8001fc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	028a      	lsls	r2, r1, #10
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fd4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001fd6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fda:	f7fe f969 	bl	80002b0 <__aeabi_uldivmod>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <HAL_RCC_GetSysClockFreq+0x458>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	0f1b      	lsrs	r3, r3, #28
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001ff6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ffa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002002:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002006:	e003      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_RCC_GetSysClockFreq+0x45c>)
 800200a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800200e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002010:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002014:	4618      	mov	r0, r3
 8002016:	37b8      	adds	r7, #184	; 0xb8
 8002018:	46bd      	mov	sp, r7
 800201a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800
 8002024:	00f42400 	.word	0x00f42400

08002028 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e28d      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 8083 	beq.w	800214e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002048:	4b94      	ldr	r3, [pc, #592]	; (800229c <HAL_RCC_OscConfig+0x274>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 030c 	and.w	r3, r3, #12
 8002050:	2b04      	cmp	r3, #4
 8002052:	d019      	beq.n	8002088 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002054:	4b91      	ldr	r3, [pc, #580]	; (800229c <HAL_RCC_OscConfig+0x274>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800205c:	2b08      	cmp	r3, #8
 800205e:	d106      	bne.n	800206e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002060:	4b8e      	ldr	r3, [pc, #568]	; (800229c <HAL_RCC_OscConfig+0x274>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800206c:	d00c      	beq.n	8002088 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800206e:	4b8b      	ldr	r3, [pc, #556]	; (800229c <HAL_RCC_OscConfig+0x274>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002076:	2b0c      	cmp	r3, #12
 8002078:	d112      	bne.n	80020a0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800207a:	4b88      	ldr	r3, [pc, #544]	; (800229c <HAL_RCC_OscConfig+0x274>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002086:	d10b      	bne.n	80020a0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002088:	4b84      	ldr	r3, [pc, #528]	; (800229c <HAL_RCC_OscConfig+0x274>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d05b      	beq.n	800214c <HAL_RCC_OscConfig+0x124>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d157      	bne.n	800214c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e25a      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a8:	d106      	bne.n	80020b8 <HAL_RCC_OscConfig+0x90>
 80020aa:	4b7c      	ldr	r3, [pc, #496]	; (800229c <HAL_RCC_OscConfig+0x274>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a7b      	ldr	r2, [pc, #492]	; (800229c <HAL_RCC_OscConfig+0x274>)
 80020b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	e01d      	b.n	80020f4 <HAL_RCC_OscConfig+0xcc>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0xb4>
 80020c2:	4b76      	ldr	r3, [pc, #472]	; (800229c <HAL_RCC_OscConfig+0x274>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a75      	ldr	r2, [pc, #468]	; (800229c <HAL_RCC_OscConfig+0x274>)
 80020c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	4b73      	ldr	r3, [pc, #460]	; (800229c <HAL_RCC_OscConfig+0x274>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a72      	ldr	r2, [pc, #456]	; (800229c <HAL_RCC_OscConfig+0x274>)
 80020d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	e00b      	b.n	80020f4 <HAL_RCC_OscConfig+0xcc>
 80020dc:	4b6f      	ldr	r3, [pc, #444]	; (800229c <HAL_RCC_OscConfig+0x274>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a6e      	ldr	r2, [pc, #440]	; (800229c <HAL_RCC_OscConfig+0x274>)
 80020e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e6:	6013      	str	r3, [r2, #0]
 80020e8:	4b6c      	ldr	r3, [pc, #432]	; (800229c <HAL_RCC_OscConfig+0x274>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a6b      	ldr	r2, [pc, #428]	; (800229c <HAL_RCC_OscConfig+0x274>)
 80020ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d013      	beq.n	8002124 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7ff f8bc 	bl	8001278 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002104:	f7ff f8b8 	bl	8001278 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b64      	cmp	r3, #100	; 0x64
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e21f      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002116:	4b61      	ldr	r3, [pc, #388]	; (800229c <HAL_RCC_OscConfig+0x274>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f0      	beq.n	8002104 <HAL_RCC_OscConfig+0xdc>
 8002122:	e014      	b.n	800214e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7ff f8a8 	bl	8001278 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800212c:	f7ff f8a4 	bl	8001278 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b64      	cmp	r3, #100	; 0x64
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e20b      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213e:	4b57      	ldr	r3, [pc, #348]	; (800229c <HAL_RCC_OscConfig+0x274>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x104>
 800214a:	e000      	b.n	800214e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d06f      	beq.n	800223a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800215a:	4b50      	ldr	r3, [pc, #320]	; (800229c <HAL_RCC_OscConfig+0x274>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b00      	cmp	r3, #0
 8002164:	d017      	beq.n	8002196 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002166:	4b4d      	ldr	r3, [pc, #308]	; (800229c <HAL_RCC_OscConfig+0x274>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800216e:	2b08      	cmp	r3, #8
 8002170:	d105      	bne.n	800217e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002172:	4b4a      	ldr	r3, [pc, #296]	; (800229c <HAL_RCC_OscConfig+0x274>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00b      	beq.n	8002196 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800217e:	4b47      	ldr	r3, [pc, #284]	; (800229c <HAL_RCC_OscConfig+0x274>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002186:	2b0c      	cmp	r3, #12
 8002188:	d11c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800218a:	4b44      	ldr	r3, [pc, #272]	; (800229c <HAL_RCC_OscConfig+0x274>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d116      	bne.n	80021c4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002196:	4b41      	ldr	r3, [pc, #260]	; (800229c <HAL_RCC_OscConfig+0x274>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d005      	beq.n	80021ae <HAL_RCC_OscConfig+0x186>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d001      	beq.n	80021ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e1d3      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ae:	4b3b      	ldr	r3, [pc, #236]	; (800229c <HAL_RCC_OscConfig+0x274>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4937      	ldr	r1, [pc, #220]	; (800229c <HAL_RCC_OscConfig+0x274>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c2:	e03a      	b.n	800223a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d020      	beq.n	800220e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021cc:	4b34      	ldr	r3, [pc, #208]	; (80022a0 <HAL_RCC_OscConfig+0x278>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d2:	f7ff f851 	bl	8001278 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021da:	f7ff f84d 	bl	8001278 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e1b4      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ec:	4b2b      	ldr	r3, [pc, #172]	; (800229c <HAL_RCC_OscConfig+0x274>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0f0      	beq.n	80021da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f8:	4b28      	ldr	r3, [pc, #160]	; (800229c <HAL_RCC_OscConfig+0x274>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	4925      	ldr	r1, [pc, #148]	; (800229c <HAL_RCC_OscConfig+0x274>)
 8002208:	4313      	orrs	r3, r2
 800220a:	600b      	str	r3, [r1, #0]
 800220c:	e015      	b.n	800223a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800220e:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <HAL_RCC_OscConfig+0x278>)
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002214:	f7ff f830 	bl	8001278 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800221c:	f7ff f82c 	bl	8001278 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e193      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222e:	4b1b      	ldr	r3, [pc, #108]	; (800229c <HAL_RCC_OscConfig+0x274>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b00      	cmp	r3, #0
 8002244:	d036      	beq.n	80022b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d016      	beq.n	800227c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800224e:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <HAL_RCC_OscConfig+0x27c>)
 8002250:	2201      	movs	r2, #1
 8002252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002254:	f7ff f810 	bl	8001278 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800225c:	f7ff f80c 	bl	8001278 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e173      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_RCC_OscConfig+0x274>)
 8002270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0x234>
 800227a:	e01b      	b.n	80022b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <HAL_RCC_OscConfig+0x27c>)
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002282:	f7fe fff9 	bl	8001278 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002288:	e00e      	b.n	80022a8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800228a:	f7fe fff5 	bl	8001278 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d907      	bls.n	80022a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e15c      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
 800229c:	40023800 	.word	0x40023800
 80022a0:	42470000 	.word	0x42470000
 80022a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a8:	4b8a      	ldr	r3, [pc, #552]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 80022aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1ea      	bne.n	800228a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 8097 	beq.w	80023f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c2:	2300      	movs	r3, #0
 80022c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c6:	4b83      	ldr	r3, [pc, #524]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10f      	bne.n	80022f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	4b7f      	ldr	r3, [pc, #508]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	4a7e      	ldr	r2, [pc, #504]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 80022dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e0:	6413      	str	r3, [r2, #64]	; 0x40
 80022e2:	4b7c      	ldr	r3, [pc, #496]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ee:	2301      	movs	r3, #1
 80022f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f2:	4b79      	ldr	r3, [pc, #484]	; (80024d8 <HAL_RCC_OscConfig+0x4b0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d118      	bne.n	8002330 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022fe:	4b76      	ldr	r3, [pc, #472]	; (80024d8 <HAL_RCC_OscConfig+0x4b0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a75      	ldr	r2, [pc, #468]	; (80024d8 <HAL_RCC_OscConfig+0x4b0>)
 8002304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800230a:	f7fe ffb5 	bl	8001278 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002312:	f7fe ffb1 	bl	8001278 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e118      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002324:	4b6c      	ldr	r3, [pc, #432]	; (80024d8 <HAL_RCC_OscConfig+0x4b0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d106      	bne.n	8002346 <HAL_RCC_OscConfig+0x31e>
 8002338:	4b66      	ldr	r3, [pc, #408]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 800233a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233c:	4a65      	ldr	r2, [pc, #404]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6713      	str	r3, [r2, #112]	; 0x70
 8002344:	e01c      	b.n	8002380 <HAL_RCC_OscConfig+0x358>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b05      	cmp	r3, #5
 800234c:	d10c      	bne.n	8002368 <HAL_RCC_OscConfig+0x340>
 800234e:	4b61      	ldr	r3, [pc, #388]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 8002350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002352:	4a60      	ldr	r2, [pc, #384]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 8002354:	f043 0304 	orr.w	r3, r3, #4
 8002358:	6713      	str	r3, [r2, #112]	; 0x70
 800235a:	4b5e      	ldr	r3, [pc, #376]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 800235c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235e:	4a5d      	ldr	r2, [pc, #372]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	6713      	str	r3, [r2, #112]	; 0x70
 8002366:	e00b      	b.n	8002380 <HAL_RCC_OscConfig+0x358>
 8002368:	4b5a      	ldr	r3, [pc, #360]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 800236a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236c:	4a59      	ldr	r2, [pc, #356]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 800236e:	f023 0301 	bic.w	r3, r3, #1
 8002372:	6713      	str	r3, [r2, #112]	; 0x70
 8002374:	4b57      	ldr	r3, [pc, #348]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 8002376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002378:	4a56      	ldr	r2, [pc, #344]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 800237a:	f023 0304 	bic.w	r3, r3, #4
 800237e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d015      	beq.n	80023b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002388:	f7fe ff76 	bl	8001278 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238e:	e00a      	b.n	80023a6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002390:	f7fe ff72 	bl	8001278 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f241 3288 	movw	r2, #5000	; 0x1388
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e0d7      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a6:	4b4b      	ldr	r3, [pc, #300]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 80023a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0ee      	beq.n	8002390 <HAL_RCC_OscConfig+0x368>
 80023b2:	e014      	b.n	80023de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b4:	f7fe ff60 	bl	8001278 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ba:	e00a      	b.n	80023d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023bc:	f7fe ff5c 	bl	8001278 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e0c1      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d2:	4b40      	ldr	r3, [pc, #256]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 80023d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1ee      	bne.n	80023bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023de:	7dfb      	ldrb	r3, [r7, #23]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d105      	bne.n	80023f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e4:	4b3b      	ldr	r3, [pc, #236]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	4a3a      	ldr	r2, [pc, #232]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 80023ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 80ad 	beq.w	8002554 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023fa:	4b36      	ldr	r3, [pc, #216]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b08      	cmp	r3, #8
 8002404:	d060      	beq.n	80024c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d145      	bne.n	800249a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240e:	4b33      	ldr	r3, [pc, #204]	; (80024dc <HAL_RCC_OscConfig+0x4b4>)
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe ff30 	bl	8001278 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241c:	f7fe ff2c 	bl	8001278 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e093      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242e:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69da      	ldr	r2, [r3, #28]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	019b      	lsls	r3, r3, #6
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002450:	085b      	lsrs	r3, r3, #1
 8002452:	3b01      	subs	r3, #1
 8002454:	041b      	lsls	r3, r3, #16
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	061b      	lsls	r3, r3, #24
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	071b      	lsls	r3, r3, #28
 8002466:	491b      	ldr	r1, [pc, #108]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800246c:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <HAL_RCC_OscConfig+0x4b4>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002472:	f7fe ff01 	bl	8001278 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247a:	f7fe fefd 	bl	8001278 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e064      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x452>
 8002498:	e05c      	b.n	8002554 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <HAL_RCC_OscConfig+0x4b4>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7fe feea 	bl	8001278 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a8:	f7fe fee6 	bl	8001278 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e04d      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x480>
 80024c6:	e045      	b.n	8002554 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d107      	bne.n	80024e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e040      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40007000 	.word	0x40007000
 80024dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024e0:	4b1f      	ldr	r3, [pc, #124]	; (8002560 <HAL_RCC_OscConfig+0x538>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d030      	beq.n	8002550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d129      	bne.n	8002550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002506:	429a      	cmp	r2, r3
 8002508:	d122      	bne.n	8002550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002510:	4013      	ands	r3, r2
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002516:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002518:	4293      	cmp	r3, r2
 800251a:	d119      	bne.n	8002550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002526:	085b      	lsrs	r3, r3, #1
 8002528:	3b01      	subs	r3, #1
 800252a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800252c:	429a      	cmp	r2, r3
 800252e:	d10f      	bne.n	8002550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800253c:	429a      	cmp	r2, r3
 800253e:	d107      	bne.n	8002550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800

08002564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e041      	b.n	80025fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe fc0e 	bl	8000dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3304      	adds	r3, #4
 80025a0:	4619      	mov	r1, r3
 80025a2:	4610      	mov	r0, r2
 80025a4:	f000 fbf8 	bl	8002d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b01      	cmp	r3, #1
 8002616:	d001      	beq.n	800261c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e046      	b.n	80026aa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a23      	ldr	r2, [pc, #140]	; (80026b8 <HAL_TIM_Base_Start+0xb4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d022      	beq.n	8002674 <HAL_TIM_Base_Start+0x70>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002636:	d01d      	beq.n	8002674 <HAL_TIM_Base_Start+0x70>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a1f      	ldr	r2, [pc, #124]	; (80026bc <HAL_TIM_Base_Start+0xb8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d018      	beq.n	8002674 <HAL_TIM_Base_Start+0x70>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a1e      	ldr	r2, [pc, #120]	; (80026c0 <HAL_TIM_Base_Start+0xbc>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d013      	beq.n	8002674 <HAL_TIM_Base_Start+0x70>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a1c      	ldr	r2, [pc, #112]	; (80026c4 <HAL_TIM_Base_Start+0xc0>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00e      	beq.n	8002674 <HAL_TIM_Base_Start+0x70>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a1b      	ldr	r2, [pc, #108]	; (80026c8 <HAL_TIM_Base_Start+0xc4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d009      	beq.n	8002674 <HAL_TIM_Base_Start+0x70>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a19      	ldr	r2, [pc, #100]	; (80026cc <HAL_TIM_Base_Start+0xc8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d004      	beq.n	8002674 <HAL_TIM_Base_Start+0x70>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a18      	ldr	r2, [pc, #96]	; (80026d0 <HAL_TIM_Base_Start+0xcc>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d111      	bne.n	8002698 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2b06      	cmp	r3, #6
 8002684:	d010      	beq.n	80026a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 0201 	orr.w	r2, r2, #1
 8002694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002696:	e007      	b.n	80026a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40010000 	.word	0x40010000
 80026bc:	40000400 	.word	0x40000400
 80026c0:	40000800 	.word	0x40000800
 80026c4:	40000c00 	.word	0x40000c00
 80026c8:	40010400 	.word	0x40010400
 80026cc:	40014000 	.word	0x40014000
 80026d0:	40001800 	.word	0x40001800

080026d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d001      	beq.n	80026ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e04e      	b.n	800278a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a23      	ldr	r2, [pc, #140]	; (8002798 <HAL_TIM_Base_Start_IT+0xc4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d022      	beq.n	8002754 <HAL_TIM_Base_Start_IT+0x80>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002716:	d01d      	beq.n	8002754 <HAL_TIM_Base_Start_IT+0x80>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1f      	ldr	r2, [pc, #124]	; (800279c <HAL_TIM_Base_Start_IT+0xc8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d018      	beq.n	8002754 <HAL_TIM_Base_Start_IT+0x80>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1e      	ldr	r2, [pc, #120]	; (80027a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d013      	beq.n	8002754 <HAL_TIM_Base_Start_IT+0x80>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a1c      	ldr	r2, [pc, #112]	; (80027a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00e      	beq.n	8002754 <HAL_TIM_Base_Start_IT+0x80>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a1b      	ldr	r2, [pc, #108]	; (80027a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d009      	beq.n	8002754 <HAL_TIM_Base_Start_IT+0x80>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a19      	ldr	r2, [pc, #100]	; (80027ac <HAL_TIM_Base_Start_IT+0xd8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d004      	beq.n	8002754 <HAL_TIM_Base_Start_IT+0x80>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a18      	ldr	r2, [pc, #96]	; (80027b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d111      	bne.n	8002778 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b06      	cmp	r3, #6
 8002764:	d010      	beq.n	8002788 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 0201 	orr.w	r2, r2, #1
 8002774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002776:	e007      	b.n	8002788 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40010000 	.word	0x40010000
 800279c:	40000400 	.word	0x40000400
 80027a0:	40000800 	.word	0x40000800
 80027a4:	40000c00 	.word	0x40000c00
 80027a8:	40010400 	.word	0x40010400
 80027ac:	40014000 	.word	0x40014000
 80027b0:	40001800 	.word	0x40001800

080027b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e041      	b.n	800284a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7fe fac6 	bl	8000d6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2202      	movs	r2, #2
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3304      	adds	r3, #4
 80027f0:	4619      	mov	r1, r3
 80027f2:	4610      	mov	r0, r2
 80027f4:	f000 fad0 	bl	8002d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d109      	bne.n	8002878 <HAL_TIM_PWM_Start+0x24>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b01      	cmp	r3, #1
 800286e:	bf14      	ite	ne
 8002870:	2301      	movne	r3, #1
 8002872:	2300      	moveq	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	e022      	b.n	80028be <HAL_TIM_PWM_Start+0x6a>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2b04      	cmp	r3, #4
 800287c:	d109      	bne.n	8002892 <HAL_TIM_PWM_Start+0x3e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b01      	cmp	r3, #1
 8002888:	bf14      	ite	ne
 800288a:	2301      	movne	r3, #1
 800288c:	2300      	moveq	r3, #0
 800288e:	b2db      	uxtb	r3, r3
 8002890:	e015      	b.n	80028be <HAL_TIM_PWM_Start+0x6a>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b08      	cmp	r3, #8
 8002896:	d109      	bne.n	80028ac <HAL_TIM_PWM_Start+0x58>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	bf14      	ite	ne
 80028a4:	2301      	movne	r3, #1
 80028a6:	2300      	moveq	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	e008      	b.n	80028be <HAL_TIM_PWM_Start+0x6a>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	bf14      	ite	ne
 80028b8:	2301      	movne	r3, #1
 80028ba:	2300      	moveq	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e07c      	b.n	80029c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d104      	bne.n	80028d6 <HAL_TIM_PWM_Start+0x82>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028d4:	e013      	b.n	80028fe <HAL_TIM_PWM_Start+0xaa>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d104      	bne.n	80028e6 <HAL_TIM_PWM_Start+0x92>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028e4:	e00b      	b.n	80028fe <HAL_TIM_PWM_Start+0xaa>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d104      	bne.n	80028f6 <HAL_TIM_PWM_Start+0xa2>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028f4:	e003      	b.n	80028fe <HAL_TIM_PWM_Start+0xaa>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2202      	movs	r2, #2
 80028fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2201      	movs	r2, #1
 8002904:	6839      	ldr	r1, [r7, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fca2 	bl	8003250 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a2d      	ldr	r2, [pc, #180]	; (80029c8 <HAL_TIM_PWM_Start+0x174>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d004      	beq.n	8002920 <HAL_TIM_PWM_Start+0xcc>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a2c      	ldr	r2, [pc, #176]	; (80029cc <HAL_TIM_PWM_Start+0x178>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d101      	bne.n	8002924 <HAL_TIM_PWM_Start+0xd0>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <HAL_TIM_PWM_Start+0xd2>
 8002924:	2300      	movs	r3, #0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d007      	beq.n	800293a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002938:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a22      	ldr	r2, [pc, #136]	; (80029c8 <HAL_TIM_PWM_Start+0x174>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d022      	beq.n	800298a <HAL_TIM_PWM_Start+0x136>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294c:	d01d      	beq.n	800298a <HAL_TIM_PWM_Start+0x136>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a1f      	ldr	r2, [pc, #124]	; (80029d0 <HAL_TIM_PWM_Start+0x17c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d018      	beq.n	800298a <HAL_TIM_PWM_Start+0x136>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a1d      	ldr	r2, [pc, #116]	; (80029d4 <HAL_TIM_PWM_Start+0x180>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d013      	beq.n	800298a <HAL_TIM_PWM_Start+0x136>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a1c      	ldr	r2, [pc, #112]	; (80029d8 <HAL_TIM_PWM_Start+0x184>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d00e      	beq.n	800298a <HAL_TIM_PWM_Start+0x136>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a16      	ldr	r2, [pc, #88]	; (80029cc <HAL_TIM_PWM_Start+0x178>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d009      	beq.n	800298a <HAL_TIM_PWM_Start+0x136>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a18      	ldr	r2, [pc, #96]	; (80029dc <HAL_TIM_PWM_Start+0x188>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d004      	beq.n	800298a <HAL_TIM_PWM_Start+0x136>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a16      	ldr	r2, [pc, #88]	; (80029e0 <HAL_TIM_PWM_Start+0x18c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d111      	bne.n	80029ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2b06      	cmp	r3, #6
 800299a:	d010      	beq.n	80029be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ac:	e007      	b.n	80029be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0201 	orr.w	r2, r2, #1
 80029bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40010000 	.word	0x40010000
 80029cc:	40010400 	.word	0x40010400
 80029d0:	40000400 	.word	0x40000400
 80029d4:	40000800 	.word	0x40000800
 80029d8:	40000c00 	.word	0x40000c00
 80029dc:	40014000 	.word	0x40014000
 80029e0:	40001800 	.word	0x40001800

080029e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d020      	beq.n	8002a48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d01b      	beq.n	8002a48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0202 	mvn.w	r2, #2
 8002a18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f994 	bl	8002d5c <HAL_TIM_IC_CaptureCallback>
 8002a34:	e005      	b.n	8002a42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f986 	bl	8002d48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f997 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d020      	beq.n	8002a94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d01b      	beq.n	8002a94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0204 	mvn.w	r2, #4
 8002a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2202      	movs	r2, #2
 8002a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f96e 	bl	8002d5c <HAL_TIM_IC_CaptureCallback>
 8002a80:	e005      	b.n	8002a8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f960 	bl	8002d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f971 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d020      	beq.n	8002ae0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d01b      	beq.n	8002ae0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0208 	mvn.w	r2, #8
 8002ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f948 	bl	8002d5c <HAL_TIM_IC_CaptureCallback>
 8002acc:	e005      	b.n	8002ada <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f93a 	bl	8002d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f94b 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d020      	beq.n	8002b2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d01b      	beq.n	8002b2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f06f 0210 	mvn.w	r2, #16
 8002afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2208      	movs	r2, #8
 8002b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f922 	bl	8002d5c <HAL_TIM_IC_CaptureCallback>
 8002b18:	e005      	b.n	8002b26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f914 	bl	8002d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f925 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00c      	beq.n	8002b50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d007      	beq.n	8002b50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0201 	mvn.w	r2, #1
 8002b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fe f8c4 	bl	8000cd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00c      	beq.n	8002b74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d007      	beq.n	8002b74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fc1a 	bl	80033a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00c      	beq.n	8002b98 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d007      	beq.n	8002b98 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f8f6 	bl	8002d84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f003 0320 	and.w	r3, r3, #32
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00c      	beq.n	8002bbc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d007      	beq.n	8002bbc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0220 	mvn.w	r2, #32
 8002bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fbec 	bl	8003394 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e0ae      	b.n	8002d40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b0c      	cmp	r3, #12
 8002bee:	f200 809f 	bhi.w	8002d30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002bf2:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002c2d 	.word	0x08002c2d
 8002bfc:	08002d31 	.word	0x08002d31
 8002c00:	08002d31 	.word	0x08002d31
 8002c04:	08002d31 	.word	0x08002d31
 8002c08:	08002c6d 	.word	0x08002c6d
 8002c0c:	08002d31 	.word	0x08002d31
 8002c10:	08002d31 	.word	0x08002d31
 8002c14:	08002d31 	.word	0x08002d31
 8002c18:	08002caf 	.word	0x08002caf
 8002c1c:	08002d31 	.word	0x08002d31
 8002c20:	08002d31 	.word	0x08002d31
 8002c24:	08002d31 	.word	0x08002d31
 8002c28:	08002cef 	.word	0x08002cef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 f95c 	bl	8002ef0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0208 	orr.w	r2, r2, #8
 8002c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0204 	bic.w	r2, r2, #4
 8002c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6999      	ldr	r1, [r3, #24]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	619a      	str	r2, [r3, #24]
      break;
 8002c6a:	e064      	b.n	8002d36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 f9ac 	bl	8002fd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6999      	ldr	r1, [r3, #24]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	021a      	lsls	r2, r3, #8
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	619a      	str	r2, [r3, #24]
      break;
 8002cac:	e043      	b.n	8002d36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68b9      	ldr	r1, [r7, #8]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fa01 	bl	80030bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69da      	ldr	r2, [r3, #28]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 0208 	orr.w	r2, r2, #8
 8002cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69da      	ldr	r2, [r3, #28]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0204 	bic.w	r2, r2, #4
 8002cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	69d9      	ldr	r1, [r3, #28]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	61da      	str	r2, [r3, #28]
      break;
 8002cec:	e023      	b.n	8002d36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68b9      	ldr	r1, [r7, #8]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 fa55 	bl	80031a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69da      	ldr	r2, [r3, #28]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69da      	ldr	r2, [r3, #28]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	69d9      	ldr	r1, [r3, #28]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	021a      	lsls	r2, r3, #8
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	61da      	str	r2, [r3, #28]
      break;
 8002d2e:	e002      	b.n	8002d36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	75fb      	strb	r3, [r7, #23]
      break;
 8002d34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a46      	ldr	r2, [pc, #280]	; (8002ec4 <TIM_Base_SetConfig+0x12c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d013      	beq.n	8002dd8 <TIM_Base_SetConfig+0x40>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db6:	d00f      	beq.n	8002dd8 <TIM_Base_SetConfig+0x40>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a43      	ldr	r2, [pc, #268]	; (8002ec8 <TIM_Base_SetConfig+0x130>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d00b      	beq.n	8002dd8 <TIM_Base_SetConfig+0x40>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a42      	ldr	r2, [pc, #264]	; (8002ecc <TIM_Base_SetConfig+0x134>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d007      	beq.n	8002dd8 <TIM_Base_SetConfig+0x40>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a41      	ldr	r2, [pc, #260]	; (8002ed0 <TIM_Base_SetConfig+0x138>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d003      	beq.n	8002dd8 <TIM_Base_SetConfig+0x40>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a40      	ldr	r2, [pc, #256]	; (8002ed4 <TIM_Base_SetConfig+0x13c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d108      	bne.n	8002dea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a35      	ldr	r2, [pc, #212]	; (8002ec4 <TIM_Base_SetConfig+0x12c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d02b      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df8:	d027      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a32      	ldr	r2, [pc, #200]	; (8002ec8 <TIM_Base_SetConfig+0x130>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d023      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a31      	ldr	r2, [pc, #196]	; (8002ecc <TIM_Base_SetConfig+0x134>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d01f      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a30      	ldr	r2, [pc, #192]	; (8002ed0 <TIM_Base_SetConfig+0x138>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d01b      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a2f      	ldr	r2, [pc, #188]	; (8002ed4 <TIM_Base_SetConfig+0x13c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d017      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a2e      	ldr	r2, [pc, #184]	; (8002ed8 <TIM_Base_SetConfig+0x140>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d013      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a2d      	ldr	r2, [pc, #180]	; (8002edc <TIM_Base_SetConfig+0x144>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00f      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a2c      	ldr	r2, [pc, #176]	; (8002ee0 <TIM_Base_SetConfig+0x148>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00b      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a2b      	ldr	r2, [pc, #172]	; (8002ee4 <TIM_Base_SetConfig+0x14c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d007      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ee8 <TIM_Base_SetConfig+0x150>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d003      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a29      	ldr	r2, [pc, #164]	; (8002eec <TIM_Base_SetConfig+0x154>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d108      	bne.n	8002e5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a10      	ldr	r2, [pc, #64]	; (8002ec4 <TIM_Base_SetConfig+0x12c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d003      	beq.n	8002e90 <TIM_Base_SetConfig+0xf8>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a12      	ldr	r2, [pc, #72]	; (8002ed4 <TIM_Base_SetConfig+0x13c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d103      	bne.n	8002e98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d105      	bne.n	8002eb6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f023 0201 	bic.w	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	611a      	str	r2, [r3, #16]
  }
}
 8002eb6:	bf00      	nop
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40010000 	.word	0x40010000
 8002ec8:	40000400 	.word	0x40000400
 8002ecc:	40000800 	.word	0x40000800
 8002ed0:	40000c00 	.word	0x40000c00
 8002ed4:	40010400 	.word	0x40010400
 8002ed8:	40014000 	.word	0x40014000
 8002edc:	40014400 	.word	0x40014400
 8002ee0:	40014800 	.word	0x40014800
 8002ee4:	40001800 	.word	0x40001800
 8002ee8:	40001c00 	.word	0x40001c00
 8002eec:	40002000 	.word	0x40002000

08002ef0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	f023 0201 	bic.w	r2, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 0303 	bic.w	r3, r3, #3
 8002f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f023 0302 	bic.w	r3, r3, #2
 8002f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a20      	ldr	r2, [pc, #128]	; (8002fc8 <TIM_OC1_SetConfig+0xd8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d003      	beq.n	8002f54 <TIM_OC1_SetConfig+0x64>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a1f      	ldr	r2, [pc, #124]	; (8002fcc <TIM_OC1_SetConfig+0xdc>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d10c      	bne.n	8002f6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f023 0308 	bic.w	r3, r3, #8
 8002f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f023 0304 	bic.w	r3, r3, #4
 8002f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a15      	ldr	r2, [pc, #84]	; (8002fc8 <TIM_OC1_SetConfig+0xd8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d003      	beq.n	8002f7e <TIM_OC1_SetConfig+0x8e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a14      	ldr	r2, [pc, #80]	; (8002fcc <TIM_OC1_SetConfig+0xdc>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d111      	bne.n	8002fa2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	621a      	str	r2, [r3, #32]
}
 8002fbc:	bf00      	nop
 8002fbe:	371c      	adds	r7, #28
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	40010000 	.word	0x40010000
 8002fcc:	40010400 	.word	0x40010400

08002fd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f023 0210 	bic.w	r2, r3, #16
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	021b      	lsls	r3, r3, #8
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	4313      	orrs	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f023 0320 	bic.w	r3, r3, #32
 800301a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4313      	orrs	r3, r2
 8003026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a22      	ldr	r2, [pc, #136]	; (80030b4 <TIM_OC2_SetConfig+0xe4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d003      	beq.n	8003038 <TIM_OC2_SetConfig+0x68>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a21      	ldr	r2, [pc, #132]	; (80030b8 <TIM_OC2_SetConfig+0xe8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d10d      	bne.n	8003054 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800303e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003052:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a17      	ldr	r2, [pc, #92]	; (80030b4 <TIM_OC2_SetConfig+0xe4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d003      	beq.n	8003064 <TIM_OC2_SetConfig+0x94>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a16      	ldr	r2, [pc, #88]	; (80030b8 <TIM_OC2_SetConfig+0xe8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d113      	bne.n	800308c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800306a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003072:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	621a      	str	r2, [r3, #32]
}
 80030a6:	bf00      	nop
 80030a8:	371c      	adds	r7, #28
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40010000 	.word	0x40010000
 80030b8:	40010400 	.word	0x40010400

080030bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0303 	bic.w	r3, r3, #3
 80030f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a21      	ldr	r2, [pc, #132]	; (800319c <TIM_OC3_SetConfig+0xe0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d003      	beq.n	8003122 <TIM_OC3_SetConfig+0x66>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a20      	ldr	r2, [pc, #128]	; (80031a0 <TIM_OC3_SetConfig+0xe4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d10d      	bne.n	800313e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003128:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	021b      	lsls	r3, r3, #8
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800313c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a16      	ldr	r2, [pc, #88]	; (800319c <TIM_OC3_SetConfig+0xe0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d003      	beq.n	800314e <TIM_OC3_SetConfig+0x92>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a15      	ldr	r2, [pc, #84]	; (80031a0 <TIM_OC3_SetConfig+0xe4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d113      	bne.n	8003176 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800315c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4313      	orrs	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	621a      	str	r2, [r3, #32]
}
 8003190:	bf00      	nop
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	40010000 	.word	0x40010000
 80031a0:	40010400 	.word	0x40010400

080031a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	021b      	lsls	r3, r3, #8
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	031b      	lsls	r3, r3, #12
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a12      	ldr	r2, [pc, #72]	; (8003248 <TIM_OC4_SetConfig+0xa4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d003      	beq.n	800320c <TIM_OC4_SetConfig+0x68>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a11      	ldr	r2, [pc, #68]	; (800324c <TIM_OC4_SetConfig+0xa8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d109      	bne.n	8003220 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003212:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	019b      	lsls	r3, r3, #6
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	621a      	str	r2, [r3, #32]
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40010000 	.word	0x40010000
 800324c:	40010400 	.word	0x40010400

08003250 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f003 031f 	and.w	r3, r3, #31
 8003262:	2201      	movs	r2, #1
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a1a      	ldr	r2, [r3, #32]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	43db      	mvns	r3, r3
 8003272:	401a      	ands	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a1a      	ldr	r2, [r3, #32]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	fa01 f303 	lsl.w	r3, r1, r3
 8003288:	431a      	orrs	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	621a      	str	r2, [r3, #32]
}
 800328e:	bf00      	nop
 8003290:	371c      	adds	r7, #28
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e05a      	b.n	800336a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a21      	ldr	r2, [pc, #132]	; (8003378 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d022      	beq.n	800333e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003300:	d01d      	beq.n	800333e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1d      	ldr	r2, [pc, #116]	; (800337c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d018      	beq.n	800333e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a1b      	ldr	r2, [pc, #108]	; (8003380 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d013      	beq.n	800333e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a1a      	ldr	r2, [pc, #104]	; (8003384 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00e      	beq.n	800333e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a18      	ldr	r2, [pc, #96]	; (8003388 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d009      	beq.n	800333e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a17      	ldr	r2, [pc, #92]	; (800338c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d004      	beq.n	800333e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a15      	ldr	r2, [pc, #84]	; (8003390 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d10c      	bne.n	8003358 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	4313      	orrs	r3, r2
 800334e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40010000 	.word	0x40010000
 800337c:	40000400 	.word	0x40000400
 8003380:	40000800 	.word	0x40000800
 8003384:	40000c00 	.word	0x40000c00
 8003388:	40010400 	.word	0x40010400
 800338c:	40014000 	.word	0x40014000
 8003390:	40001800 	.word	0x40001800

08003394 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e042      	b.n	8003454 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fd fd62 	bl	8000eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2224      	movs	r2, #36	; 0x24
 80033ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fdbd 	bl	8003f80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003414:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003424:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003434:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	; 0x28
 8003460:	af02      	add	r7, sp, #8
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b20      	cmp	r3, #32
 800347a:	d175      	bne.n	8003568 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <HAL_UART_Transmit+0x2c>
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e06e      	b.n	800356a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2221      	movs	r2, #33	; 0x21
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800349a:	f7fd feed 	bl	8001278 <HAL_GetTick>
 800349e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	88fa      	ldrh	r2, [r7, #6]
 80034a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	88fa      	ldrh	r2, [r7, #6]
 80034aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b4:	d108      	bne.n	80034c8 <HAL_UART_Transmit+0x6c>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d104      	bne.n	80034c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	e003      	b.n	80034d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034d0:	e02e      	b.n	8003530 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2200      	movs	r2, #0
 80034da:	2180      	movs	r1, #128	; 0x80
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 fb1f 	bl	8003b20 <UART_WaitOnFlagUntilTimeout>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e03a      	b.n	800356a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10b      	bne.n	8003512 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003508:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	3302      	adds	r3, #2
 800350e:	61bb      	str	r3, [r7, #24]
 8003510:	e007      	b.n	8003522 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	781a      	ldrb	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	3301      	adds	r3, #1
 8003520:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003526:	b29b      	uxth	r3, r3
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1cb      	bne.n	80034d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2200      	movs	r2, #0
 8003542:	2140      	movs	r1, #64	; 0x40
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 faeb 	bl	8003b20 <UART_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e006      	b.n	800356a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	e000      	b.n	800356a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003568:	2302      	movs	r3, #2
  }
}
 800356a:	4618      	mov	r0, r3
 800356c:	3720      	adds	r7, #32
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b084      	sub	sp, #16
 8003576:	af00      	add	r7, sp, #0
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	4613      	mov	r3, r2
 800357e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b20      	cmp	r3, #32
 800358a:	d112      	bne.n	80035b2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_UART_Receive_IT+0x26>
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e00b      	b.n	80035b4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035a2:	88fb      	ldrh	r3, [r7, #6]
 80035a4:	461a      	mov	r2, r3
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 fb12 	bl	8003bd2 <UART_Start_Receive_IT>
 80035ae:	4603      	mov	r3, r0
 80035b0:	e000      	b.n	80035b4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80035b2:	2302      	movs	r3, #2
  }
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b0ba      	sub	sp, #232	; 0xe8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80035fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10f      	bne.n	8003622 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <HAL_UART_IRQHandler+0x66>
 800360e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003612:	f003 0320 	and.w	r3, r3, #32
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 fbf2 	bl	8003e04 <UART_Receive_IT>
      return;
 8003620:	e25b      	b.n	8003ada <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003622:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 80de 	beq.w	80037e8 <HAL_UART_IRQHandler+0x22c>
 800362c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d106      	bne.n	8003646 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800363c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80d1 	beq.w	80037e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00b      	beq.n	800366a <HAL_UART_IRQHandler+0xae>
 8003652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d005      	beq.n	800366a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003662:	f043 0201 	orr.w	r2, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800366a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00b      	beq.n	800368e <HAL_UART_IRQHandler+0xd2>
 8003676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d005      	beq.n	800368e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	f043 0202 	orr.w	r2, r3, #2
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800368e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00b      	beq.n	80036b2 <HAL_UART_IRQHandler+0xf6>
 800369a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d005      	beq.n	80036b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	f043 0204 	orr.w	r2, r3, #4
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d011      	beq.n	80036e2 <HAL_UART_IRQHandler+0x126>
 80036be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d105      	bne.n	80036d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036da:	f043 0208 	orr.w	r2, r3, #8
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 81f2 	beq.w	8003ad0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <HAL_UART_IRQHandler+0x14e>
 80036f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 fb7d 	bl	8003e04 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003714:	2b40      	cmp	r3, #64	; 0x40
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d103      	bne.n	8003736 <HAL_UART_IRQHandler+0x17a>
 800372e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003732:	2b00      	cmp	r3, #0
 8003734:	d04f      	beq.n	80037d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 fa85 	bl	8003c46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003746:	2b40      	cmp	r3, #64	; 0x40
 8003748:	d141      	bne.n	80037ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	3314      	adds	r3, #20
 8003750:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003754:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003758:	e853 3f00 	ldrex	r3, [r3]
 800375c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003760:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003768:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3314      	adds	r3, #20
 8003772:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003776:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800377a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003782:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003786:	e841 2300 	strex	r3, r2, [r1]
 800378a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800378e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1d9      	bne.n	800374a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379a:	2b00      	cmp	r3, #0
 800379c:	d013      	beq.n	80037c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a2:	4a7e      	ldr	r2, [pc, #504]	; (800399c <HAL_UART_IRQHandler+0x3e0>)
 80037a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fd fef1 	bl	8001592 <HAL_DMA_Abort_IT>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d016      	beq.n	80037e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037c0:	4610      	mov	r0, r2
 80037c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c4:	e00e      	b.n	80037e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f994 	bl	8003af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037cc:	e00a      	b.n	80037e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f990 	bl	8003af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d4:	e006      	b.n	80037e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f98c 	bl	8003af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80037e2:	e175      	b.n	8003ad0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e4:	bf00      	nop
    return;
 80037e6:	e173      	b.n	8003ad0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	f040 814f 	bne.w	8003a90 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 8148 	beq.w	8003a90 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 8141 	beq.w	8003a90 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800380e:	2300      	movs	r3, #0
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	f040 80b6 	bne.w	80039a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003840:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 8145 	beq.w	8003ad4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800384e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003852:	429a      	cmp	r2, r3
 8003854:	f080 813e 	bcs.w	8003ad4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800385e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800386a:	f000 8088 	beq.w	800397e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	330c      	adds	r3, #12
 8003874:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003878:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800387c:	e853 3f00 	ldrex	r3, [r3]
 8003880:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003884:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800388c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	330c      	adds	r3, #12
 8003896:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800389a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800389e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038aa:	e841 2300 	strex	r3, r2, [r1]
 80038ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80038b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1d9      	bne.n	800386e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3314      	adds	r3, #20
 80038c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038c4:	e853 3f00 	ldrex	r3, [r3]
 80038c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80038ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3314      	adds	r3, #20
 80038da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038ea:	e841 2300 	strex	r3, r2, [r1]
 80038ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1e1      	bne.n	80038ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3314      	adds	r3, #20
 80038fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003900:	e853 3f00 	ldrex	r3, [r3]
 8003904:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800390c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3314      	adds	r3, #20
 8003916:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800391a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800391c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003920:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003922:	e841 2300 	strex	r3, r2, [r1]
 8003926:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1e3      	bne.n	80038f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	330c      	adds	r3, #12
 8003942:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003946:	e853 3f00 	ldrex	r3, [r3]
 800394a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800394c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800394e:	f023 0310 	bic.w	r3, r3, #16
 8003952:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	330c      	adds	r3, #12
 800395c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003960:	65ba      	str	r2, [r7, #88]	; 0x58
 8003962:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003964:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003966:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003968:	e841 2300 	strex	r3, r2, [r1]
 800396c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800396e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1e3      	bne.n	800393c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003978:	4618      	mov	r0, r3
 800397a:	f7fd fd9a 	bl	80014b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2202      	movs	r2, #2
 8003982:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800398c:	b29b      	uxth	r3, r3
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	b29b      	uxth	r3, r3
 8003992:	4619      	mov	r1, r3
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f8b7 	bl	8003b08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800399a:	e09b      	b.n	8003ad4 <HAL_UART_IRQHandler+0x518>
 800399c:	08003d0d 	.word	0x08003d0d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 808e 	beq.w	8003ad8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80039bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 8089 	beq.w	8003ad8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	330c      	adds	r3, #12
 80039cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d0:	e853 3f00 	ldrex	r3, [r3]
 80039d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	330c      	adds	r3, #12
 80039e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80039ea:	647a      	str	r2, [r7, #68]	; 0x44
 80039ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039f2:	e841 2300 	strex	r3, r2, [r1]
 80039f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1e3      	bne.n	80039c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3314      	adds	r3, #20
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	e853 3f00 	ldrex	r3, [r3]
 8003a0c:	623b      	str	r3, [r7, #32]
   return(result);
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	f023 0301 	bic.w	r3, r3, #1
 8003a14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3314      	adds	r3, #20
 8003a1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a22:	633a      	str	r2, [r7, #48]	; 0x30
 8003a24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a2a:	e841 2300 	strex	r3, r2, [r1]
 8003a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1e3      	bne.n	80039fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	330c      	adds	r3, #12
 8003a4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	e853 3f00 	ldrex	r3, [r3]
 8003a52:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 0310 	bic.w	r3, r3, #16
 8003a5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	330c      	adds	r3, #12
 8003a64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a68:	61fa      	str	r2, [r7, #28]
 8003a6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6c:	69b9      	ldr	r1, [r7, #24]
 8003a6e:	69fa      	ldr	r2, [r7, #28]
 8003a70:	e841 2300 	strex	r3, r2, [r1]
 8003a74:	617b      	str	r3, [r7, #20]
   return(result);
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1e3      	bne.n	8003a44 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a86:	4619      	mov	r1, r3
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f83d 	bl	8003b08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a8e:	e023      	b.n	8003ad8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d009      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x4f4>
 8003a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f943 	bl	8003d34 <UART_Transmit_IT>
    return;
 8003aae:	e014      	b.n	8003ada <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00e      	beq.n	8003ada <HAL_UART_IRQHandler+0x51e>
 8003abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f983 	bl	8003dd4 <UART_EndTransmit_IT>
    return;
 8003ace:	e004      	b.n	8003ada <HAL_UART_IRQHandler+0x51e>
    return;
 8003ad0:	bf00      	nop
 8003ad2:	e002      	b.n	8003ada <HAL_UART_IRQHandler+0x51e>
      return;
 8003ad4:	bf00      	nop
 8003ad6:	e000      	b.n	8003ada <HAL_UART_IRQHandler+0x51e>
      return;
 8003ad8:	bf00      	nop
  }
}
 8003ada:	37e8      	adds	r7, #232	; 0xe8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b30:	e03b      	b.n	8003baa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b38:	d037      	beq.n	8003baa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3a:	f7fd fb9d 	bl	8001278 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	6a3a      	ldr	r2, [r7, #32]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d302      	bcc.n	8003b50 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e03a      	b.n	8003bca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d023      	beq.n	8003baa <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b80      	cmp	r3, #128	; 0x80
 8003b66:	d020      	beq.n	8003baa <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b40      	cmp	r3, #64	; 0x40
 8003b6c:	d01d      	beq.n	8003baa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d116      	bne.n	8003baa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f857 	bl	8003c46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e00f      	b.n	8003bca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	bf0c      	ite	eq
 8003bba:	2301      	moveq	r3, #1
 8003bbc:	2300      	movne	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	79fb      	ldrb	r3, [r7, #7]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d0b4      	beq.n	8003b32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b085      	sub	sp, #20
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	88fa      	ldrh	r2, [r7, #6]
 8003bea:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	88fa      	ldrh	r2, [r7, #6]
 8003bf0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2222      	movs	r2, #34	; 0x22
 8003bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d007      	beq.n	8003c18 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c16:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695a      	ldr	r2, [r3, #20]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0220 	orr.w	r2, r2, #32
 8003c36:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b095      	sub	sp, #84	; 0x54
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	330c      	adds	r3, #12
 8003c54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c58:	e853 3f00 	ldrex	r3, [r3]
 8003c5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	330c      	adds	r3, #12
 8003c6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c6e:	643a      	str	r2, [r7, #64]	; 0x40
 8003c70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c76:	e841 2300 	strex	r3, r2, [r1]
 8003c7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e5      	bne.n	8003c4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3314      	adds	r3, #20
 8003c88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f023 0301 	bic.w	r3, r3, #1
 8003c98:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3314      	adds	r3, #20
 8003ca0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ca4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003caa:	e841 2300 	strex	r3, r2, [r1]
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1e5      	bne.n	8003c82 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d119      	bne.n	8003cf2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	330c      	adds	r3, #12
 8003cc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	e853 3f00 	ldrex	r3, [r3]
 8003ccc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f023 0310 	bic.w	r3, r3, #16
 8003cd4:	647b      	str	r3, [r7, #68]	; 0x44
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	330c      	adds	r3, #12
 8003cdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cde:	61ba      	str	r2, [r7, #24]
 8003ce0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce2:	6979      	ldr	r1, [r7, #20]
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	e841 2300 	strex	r3, r2, [r1]
 8003cea:	613b      	str	r3, [r7, #16]
   return(result);
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1e5      	bne.n	8003cbe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d00:	bf00      	nop
 8003d02:	3754      	adds	r7, #84	; 0x54
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f7ff fee4 	bl	8003af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d2c:	bf00      	nop
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b21      	cmp	r3, #33	; 0x21
 8003d46:	d13e      	bne.n	8003dc6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d50:	d114      	bne.n	8003d7c <UART_Transmit_IT+0x48>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d110      	bne.n	8003d7c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	461a      	mov	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d6e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	1c9a      	adds	r2, r3, #2
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	621a      	str	r2, [r3, #32]
 8003d7a:	e008      	b.n	8003d8e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	1c59      	adds	r1, r3, #1
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6211      	str	r1, [r2, #32]
 8003d86:	781a      	ldrb	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10f      	bne.n	8003dc2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003db0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dc0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e000      	b.n	8003dc8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003dc6:	2302      	movs	r3, #2
  }
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff fe73 	bl	8003ae0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08c      	sub	sp, #48	; 0x30
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b22      	cmp	r3, #34	; 0x22
 8003e16:	f040 80ae 	bne.w	8003f76 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e22:	d117      	bne.n	8003e54 <UART_Receive_IT+0x50>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d113      	bne.n	8003e54 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	1c9a      	adds	r2, r3, #2
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	629a      	str	r2, [r3, #40]	; 0x28
 8003e52:	e026      	b.n	8003ea2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e66:	d007      	beq.n	8003e78 <UART_Receive_IT+0x74>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10a      	bne.n	8003e86 <UART_Receive_IT+0x82>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d106      	bne.n	8003e86 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	701a      	strb	r2, [r3, #0]
 8003e84:	e008      	b.n	8003e98 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e96:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d15d      	bne.n	8003f72 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0220 	bic.w	r2, r2, #32
 8003ec4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ed4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695a      	ldr	r2, [r3, #20]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0201 	bic.w	r2, r2, #1
 8003ee4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d135      	bne.n	8003f68 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	330c      	adds	r3, #12
 8003f08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	e853 3f00 	ldrex	r3, [r3]
 8003f10:	613b      	str	r3, [r7, #16]
   return(result);
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f023 0310 	bic.w	r3, r3, #16
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	330c      	adds	r3, #12
 8003f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f22:	623a      	str	r2, [r7, #32]
 8003f24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f26:	69f9      	ldr	r1, [r7, #28]
 8003f28:	6a3a      	ldr	r2, [r7, #32]
 8003f2a:	e841 2300 	strex	r3, r2, [r1]
 8003f2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1e5      	bne.n	8003f02 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0310 	and.w	r3, r3, #16
 8003f40:	2b10      	cmp	r3, #16
 8003f42:	d10a      	bne.n	8003f5a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f44:	2300      	movs	r3, #0
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f5e:	4619      	mov	r1, r3
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff fdd1 	bl	8003b08 <HAL_UARTEx_RxEventCallback>
 8003f66:	e002      	b.n	8003f6e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7fc fe85 	bl	8000c78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e002      	b.n	8003f78 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	e000      	b.n	8003f78 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003f76:	2302      	movs	r3, #2
  }
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3730      	adds	r7, #48	; 0x30
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f84:	b0c0      	sub	sp, #256	; 0x100
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9c:	68d9      	ldr	r1, [r3, #12]
 8003f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	ea40 0301 	orr.w	r3, r0, r1
 8003fa8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fd8:	f021 010c 	bic.w	r1, r1, #12
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003fe6:	430b      	orrs	r3, r1
 8003fe8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffa:	6999      	ldr	r1, [r3, #24]
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	ea40 0301 	orr.w	r3, r0, r1
 8004006:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	4b8f      	ldr	r3, [pc, #572]	; (800424c <UART_SetConfig+0x2cc>)
 8004010:	429a      	cmp	r2, r3
 8004012:	d005      	beq.n	8004020 <UART_SetConfig+0xa0>
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	4b8d      	ldr	r3, [pc, #564]	; (8004250 <UART_SetConfig+0x2d0>)
 800401c:	429a      	cmp	r2, r3
 800401e:	d104      	bne.n	800402a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004020:	f7fd fdbe 	bl	8001ba0 <HAL_RCC_GetPCLK2Freq>
 8004024:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004028:	e003      	b.n	8004032 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800402a:	f7fd fda5 	bl	8001b78 <HAL_RCC_GetPCLK1Freq>
 800402e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800403c:	f040 810c 	bne.w	8004258 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004044:	2200      	movs	r2, #0
 8004046:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800404a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800404e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004052:	4622      	mov	r2, r4
 8004054:	462b      	mov	r3, r5
 8004056:	1891      	adds	r1, r2, r2
 8004058:	65b9      	str	r1, [r7, #88]	; 0x58
 800405a:	415b      	adcs	r3, r3
 800405c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800405e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004062:	4621      	mov	r1, r4
 8004064:	eb12 0801 	adds.w	r8, r2, r1
 8004068:	4629      	mov	r1, r5
 800406a:	eb43 0901 	adc.w	r9, r3, r1
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800407a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800407e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004082:	4690      	mov	r8, r2
 8004084:	4699      	mov	r9, r3
 8004086:	4623      	mov	r3, r4
 8004088:	eb18 0303 	adds.w	r3, r8, r3
 800408c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004090:	462b      	mov	r3, r5
 8004092:	eb49 0303 	adc.w	r3, r9, r3
 8004096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800409a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040ae:	460b      	mov	r3, r1
 80040b0:	18db      	adds	r3, r3, r3
 80040b2:	653b      	str	r3, [r7, #80]	; 0x50
 80040b4:	4613      	mov	r3, r2
 80040b6:	eb42 0303 	adc.w	r3, r2, r3
 80040ba:	657b      	str	r3, [r7, #84]	; 0x54
 80040bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040c4:	f7fc f8f4 	bl	80002b0 <__aeabi_uldivmod>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4b61      	ldr	r3, [pc, #388]	; (8004254 <UART_SetConfig+0x2d4>)
 80040ce:	fba3 2302 	umull	r2, r3, r3, r2
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	011c      	lsls	r4, r3, #4
 80040d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040da:	2200      	movs	r2, #0
 80040dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040e8:	4642      	mov	r2, r8
 80040ea:	464b      	mov	r3, r9
 80040ec:	1891      	adds	r1, r2, r2
 80040ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80040f0:	415b      	adcs	r3, r3
 80040f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040f8:	4641      	mov	r1, r8
 80040fa:	eb12 0a01 	adds.w	sl, r2, r1
 80040fe:	4649      	mov	r1, r9
 8004100:	eb43 0b01 	adc.w	fp, r3, r1
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004110:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004114:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004118:	4692      	mov	sl, r2
 800411a:	469b      	mov	fp, r3
 800411c:	4643      	mov	r3, r8
 800411e:	eb1a 0303 	adds.w	r3, sl, r3
 8004122:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004126:	464b      	mov	r3, r9
 8004128:	eb4b 0303 	adc.w	r3, fp, r3
 800412c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800413c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004140:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004144:	460b      	mov	r3, r1
 8004146:	18db      	adds	r3, r3, r3
 8004148:	643b      	str	r3, [r7, #64]	; 0x40
 800414a:	4613      	mov	r3, r2
 800414c:	eb42 0303 	adc.w	r3, r2, r3
 8004150:	647b      	str	r3, [r7, #68]	; 0x44
 8004152:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004156:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800415a:	f7fc f8a9 	bl	80002b0 <__aeabi_uldivmod>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4611      	mov	r1, r2
 8004164:	4b3b      	ldr	r3, [pc, #236]	; (8004254 <UART_SetConfig+0x2d4>)
 8004166:	fba3 2301 	umull	r2, r3, r3, r1
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	2264      	movs	r2, #100	; 0x64
 800416e:	fb02 f303 	mul.w	r3, r2, r3
 8004172:	1acb      	subs	r3, r1, r3
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800417a:	4b36      	ldr	r3, [pc, #216]	; (8004254 <UART_SetConfig+0x2d4>)
 800417c:	fba3 2302 	umull	r2, r3, r3, r2
 8004180:	095b      	lsrs	r3, r3, #5
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004188:	441c      	add	r4, r3
 800418a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800418e:	2200      	movs	r2, #0
 8004190:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004194:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004198:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800419c:	4642      	mov	r2, r8
 800419e:	464b      	mov	r3, r9
 80041a0:	1891      	adds	r1, r2, r2
 80041a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80041a4:	415b      	adcs	r3, r3
 80041a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041ac:	4641      	mov	r1, r8
 80041ae:	1851      	adds	r1, r2, r1
 80041b0:	6339      	str	r1, [r7, #48]	; 0x30
 80041b2:	4649      	mov	r1, r9
 80041b4:	414b      	adcs	r3, r1
 80041b6:	637b      	str	r3, [r7, #52]	; 0x34
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041c4:	4659      	mov	r1, fp
 80041c6:	00cb      	lsls	r3, r1, #3
 80041c8:	4651      	mov	r1, sl
 80041ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ce:	4651      	mov	r1, sl
 80041d0:	00ca      	lsls	r2, r1, #3
 80041d2:	4610      	mov	r0, r2
 80041d4:	4619      	mov	r1, r3
 80041d6:	4603      	mov	r3, r0
 80041d8:	4642      	mov	r2, r8
 80041da:	189b      	adds	r3, r3, r2
 80041dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041e0:	464b      	mov	r3, r9
 80041e2:	460a      	mov	r2, r1
 80041e4:	eb42 0303 	adc.w	r3, r2, r3
 80041e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80041fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004200:	460b      	mov	r3, r1
 8004202:	18db      	adds	r3, r3, r3
 8004204:	62bb      	str	r3, [r7, #40]	; 0x28
 8004206:	4613      	mov	r3, r2
 8004208:	eb42 0303 	adc.w	r3, r2, r3
 800420c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800420e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004212:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004216:	f7fc f84b 	bl	80002b0 <__aeabi_uldivmod>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4b0d      	ldr	r3, [pc, #52]	; (8004254 <UART_SetConfig+0x2d4>)
 8004220:	fba3 1302 	umull	r1, r3, r3, r2
 8004224:	095b      	lsrs	r3, r3, #5
 8004226:	2164      	movs	r1, #100	; 0x64
 8004228:	fb01 f303 	mul.w	r3, r1, r3
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	3332      	adds	r3, #50	; 0x32
 8004232:	4a08      	ldr	r2, [pc, #32]	; (8004254 <UART_SetConfig+0x2d4>)
 8004234:	fba2 2303 	umull	r2, r3, r2, r3
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	f003 0207 	and.w	r2, r3, #7
 800423e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4422      	add	r2, r4
 8004246:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004248:	e106      	b.n	8004458 <UART_SetConfig+0x4d8>
 800424a:	bf00      	nop
 800424c:	40011000 	.word	0x40011000
 8004250:	40011400 	.word	0x40011400
 8004254:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800425c:	2200      	movs	r2, #0
 800425e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004262:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004266:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800426a:	4642      	mov	r2, r8
 800426c:	464b      	mov	r3, r9
 800426e:	1891      	adds	r1, r2, r2
 8004270:	6239      	str	r1, [r7, #32]
 8004272:	415b      	adcs	r3, r3
 8004274:	627b      	str	r3, [r7, #36]	; 0x24
 8004276:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800427a:	4641      	mov	r1, r8
 800427c:	1854      	adds	r4, r2, r1
 800427e:	4649      	mov	r1, r9
 8004280:	eb43 0501 	adc.w	r5, r3, r1
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	00eb      	lsls	r3, r5, #3
 800428e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004292:	00e2      	lsls	r2, r4, #3
 8004294:	4614      	mov	r4, r2
 8004296:	461d      	mov	r5, r3
 8004298:	4643      	mov	r3, r8
 800429a:	18e3      	adds	r3, r4, r3
 800429c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042a0:	464b      	mov	r3, r9
 80042a2:	eb45 0303 	adc.w	r3, r5, r3
 80042a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042c6:	4629      	mov	r1, r5
 80042c8:	008b      	lsls	r3, r1, #2
 80042ca:	4621      	mov	r1, r4
 80042cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042d0:	4621      	mov	r1, r4
 80042d2:	008a      	lsls	r2, r1, #2
 80042d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042d8:	f7fb ffea 	bl	80002b0 <__aeabi_uldivmod>
 80042dc:	4602      	mov	r2, r0
 80042de:	460b      	mov	r3, r1
 80042e0:	4b60      	ldr	r3, [pc, #384]	; (8004464 <UART_SetConfig+0x4e4>)
 80042e2:	fba3 2302 	umull	r2, r3, r3, r2
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	011c      	lsls	r4, r3, #4
 80042ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80042fc:	4642      	mov	r2, r8
 80042fe:	464b      	mov	r3, r9
 8004300:	1891      	adds	r1, r2, r2
 8004302:	61b9      	str	r1, [r7, #24]
 8004304:	415b      	adcs	r3, r3
 8004306:	61fb      	str	r3, [r7, #28]
 8004308:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800430c:	4641      	mov	r1, r8
 800430e:	1851      	adds	r1, r2, r1
 8004310:	6139      	str	r1, [r7, #16]
 8004312:	4649      	mov	r1, r9
 8004314:	414b      	adcs	r3, r1
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004324:	4659      	mov	r1, fp
 8004326:	00cb      	lsls	r3, r1, #3
 8004328:	4651      	mov	r1, sl
 800432a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800432e:	4651      	mov	r1, sl
 8004330:	00ca      	lsls	r2, r1, #3
 8004332:	4610      	mov	r0, r2
 8004334:	4619      	mov	r1, r3
 8004336:	4603      	mov	r3, r0
 8004338:	4642      	mov	r2, r8
 800433a:	189b      	adds	r3, r3, r2
 800433c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004340:	464b      	mov	r3, r9
 8004342:	460a      	mov	r2, r1
 8004344:	eb42 0303 	adc.w	r3, r2, r3
 8004348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800434c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	67bb      	str	r3, [r7, #120]	; 0x78
 8004356:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004364:	4649      	mov	r1, r9
 8004366:	008b      	lsls	r3, r1, #2
 8004368:	4641      	mov	r1, r8
 800436a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800436e:	4641      	mov	r1, r8
 8004370:	008a      	lsls	r2, r1, #2
 8004372:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004376:	f7fb ff9b 	bl	80002b0 <__aeabi_uldivmod>
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	4611      	mov	r1, r2
 8004380:	4b38      	ldr	r3, [pc, #224]	; (8004464 <UART_SetConfig+0x4e4>)
 8004382:	fba3 2301 	umull	r2, r3, r3, r1
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	2264      	movs	r2, #100	; 0x64
 800438a:	fb02 f303 	mul.w	r3, r2, r3
 800438e:	1acb      	subs	r3, r1, r3
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	3332      	adds	r3, #50	; 0x32
 8004394:	4a33      	ldr	r2, [pc, #204]	; (8004464 <UART_SetConfig+0x4e4>)
 8004396:	fba2 2303 	umull	r2, r3, r2, r3
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043a0:	441c      	add	r4, r3
 80043a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043a6:	2200      	movs	r2, #0
 80043a8:	673b      	str	r3, [r7, #112]	; 0x70
 80043aa:	677a      	str	r2, [r7, #116]	; 0x74
 80043ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043b0:	4642      	mov	r2, r8
 80043b2:	464b      	mov	r3, r9
 80043b4:	1891      	adds	r1, r2, r2
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	415b      	adcs	r3, r3
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043c0:	4641      	mov	r1, r8
 80043c2:	1851      	adds	r1, r2, r1
 80043c4:	6039      	str	r1, [r7, #0]
 80043c6:	4649      	mov	r1, r9
 80043c8:	414b      	adcs	r3, r1
 80043ca:	607b      	str	r3, [r7, #4]
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043d8:	4659      	mov	r1, fp
 80043da:	00cb      	lsls	r3, r1, #3
 80043dc:	4651      	mov	r1, sl
 80043de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043e2:	4651      	mov	r1, sl
 80043e4:	00ca      	lsls	r2, r1, #3
 80043e6:	4610      	mov	r0, r2
 80043e8:	4619      	mov	r1, r3
 80043ea:	4603      	mov	r3, r0
 80043ec:	4642      	mov	r2, r8
 80043ee:	189b      	adds	r3, r3, r2
 80043f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80043f2:	464b      	mov	r3, r9
 80043f4:	460a      	mov	r2, r1
 80043f6:	eb42 0303 	adc.w	r3, r2, r3
 80043fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	663b      	str	r3, [r7, #96]	; 0x60
 8004406:	667a      	str	r2, [r7, #100]	; 0x64
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004414:	4649      	mov	r1, r9
 8004416:	008b      	lsls	r3, r1, #2
 8004418:	4641      	mov	r1, r8
 800441a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800441e:	4641      	mov	r1, r8
 8004420:	008a      	lsls	r2, r1, #2
 8004422:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004426:	f7fb ff43 	bl	80002b0 <__aeabi_uldivmod>
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	4b0d      	ldr	r3, [pc, #52]	; (8004464 <UART_SetConfig+0x4e4>)
 8004430:	fba3 1302 	umull	r1, r3, r3, r2
 8004434:	095b      	lsrs	r3, r3, #5
 8004436:	2164      	movs	r1, #100	; 0x64
 8004438:	fb01 f303 	mul.w	r3, r1, r3
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	3332      	adds	r3, #50	; 0x32
 8004442:	4a08      	ldr	r2, [pc, #32]	; (8004464 <UART_SetConfig+0x4e4>)
 8004444:	fba2 2303 	umull	r2, r3, r2, r3
 8004448:	095b      	lsrs	r3, r3, #5
 800444a:	f003 020f 	and.w	r2, r3, #15
 800444e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4422      	add	r2, r4
 8004456:	609a      	str	r2, [r3, #8]
}
 8004458:	bf00      	nop
 800445a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800445e:	46bd      	mov	sp, r7
 8004460:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004464:	51eb851f 	.word	0x51eb851f

08004468 <atoi>:
 8004468:	220a      	movs	r2, #10
 800446a:	2100      	movs	r1, #0
 800446c:	f000 b882 	b.w	8004574 <strtol>

08004470 <_strtol_l.constprop.0>:
 8004470:	2b01      	cmp	r3, #1
 8004472:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004476:	d001      	beq.n	800447c <_strtol_l.constprop.0+0xc>
 8004478:	2b24      	cmp	r3, #36	; 0x24
 800447a:	d906      	bls.n	800448a <_strtol_l.constprop.0+0x1a>
 800447c:	f000 fb46 	bl	8004b0c <__errno>
 8004480:	2316      	movs	r3, #22
 8004482:	6003      	str	r3, [r0, #0]
 8004484:	2000      	movs	r0, #0
 8004486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800448a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004570 <_strtol_l.constprop.0+0x100>
 800448e:	460d      	mov	r5, r1
 8004490:	462e      	mov	r6, r5
 8004492:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004496:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800449a:	f017 0708 	ands.w	r7, r7, #8
 800449e:	d1f7      	bne.n	8004490 <_strtol_l.constprop.0+0x20>
 80044a0:	2c2d      	cmp	r4, #45	; 0x2d
 80044a2:	d132      	bne.n	800450a <_strtol_l.constprop.0+0x9a>
 80044a4:	782c      	ldrb	r4, [r5, #0]
 80044a6:	2701      	movs	r7, #1
 80044a8:	1cb5      	adds	r5, r6, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d05b      	beq.n	8004566 <_strtol_l.constprop.0+0xf6>
 80044ae:	2b10      	cmp	r3, #16
 80044b0:	d109      	bne.n	80044c6 <_strtol_l.constprop.0+0x56>
 80044b2:	2c30      	cmp	r4, #48	; 0x30
 80044b4:	d107      	bne.n	80044c6 <_strtol_l.constprop.0+0x56>
 80044b6:	782c      	ldrb	r4, [r5, #0]
 80044b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80044bc:	2c58      	cmp	r4, #88	; 0x58
 80044be:	d14d      	bne.n	800455c <_strtol_l.constprop.0+0xec>
 80044c0:	786c      	ldrb	r4, [r5, #1]
 80044c2:	2310      	movs	r3, #16
 80044c4:	3502      	adds	r5, #2
 80044c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80044ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80044ce:	f04f 0e00 	mov.w	lr, #0
 80044d2:	fbb8 f9f3 	udiv	r9, r8, r3
 80044d6:	4676      	mov	r6, lr
 80044d8:	fb03 8a19 	mls	sl, r3, r9, r8
 80044dc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80044e0:	f1bc 0f09 	cmp.w	ip, #9
 80044e4:	d816      	bhi.n	8004514 <_strtol_l.constprop.0+0xa4>
 80044e6:	4664      	mov	r4, ip
 80044e8:	42a3      	cmp	r3, r4
 80044ea:	dd24      	ble.n	8004536 <_strtol_l.constprop.0+0xc6>
 80044ec:	f1be 3fff 	cmp.w	lr, #4294967295
 80044f0:	d008      	beq.n	8004504 <_strtol_l.constprop.0+0x94>
 80044f2:	45b1      	cmp	r9, r6
 80044f4:	d31c      	bcc.n	8004530 <_strtol_l.constprop.0+0xc0>
 80044f6:	d101      	bne.n	80044fc <_strtol_l.constprop.0+0x8c>
 80044f8:	45a2      	cmp	sl, r4
 80044fa:	db19      	blt.n	8004530 <_strtol_l.constprop.0+0xc0>
 80044fc:	fb06 4603 	mla	r6, r6, r3, r4
 8004500:	f04f 0e01 	mov.w	lr, #1
 8004504:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004508:	e7e8      	b.n	80044dc <_strtol_l.constprop.0+0x6c>
 800450a:	2c2b      	cmp	r4, #43	; 0x2b
 800450c:	bf04      	itt	eq
 800450e:	782c      	ldrbeq	r4, [r5, #0]
 8004510:	1cb5      	addeq	r5, r6, #2
 8004512:	e7ca      	b.n	80044aa <_strtol_l.constprop.0+0x3a>
 8004514:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004518:	f1bc 0f19 	cmp.w	ip, #25
 800451c:	d801      	bhi.n	8004522 <_strtol_l.constprop.0+0xb2>
 800451e:	3c37      	subs	r4, #55	; 0x37
 8004520:	e7e2      	b.n	80044e8 <_strtol_l.constprop.0+0x78>
 8004522:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004526:	f1bc 0f19 	cmp.w	ip, #25
 800452a:	d804      	bhi.n	8004536 <_strtol_l.constprop.0+0xc6>
 800452c:	3c57      	subs	r4, #87	; 0x57
 800452e:	e7db      	b.n	80044e8 <_strtol_l.constprop.0+0x78>
 8004530:	f04f 3eff 	mov.w	lr, #4294967295
 8004534:	e7e6      	b.n	8004504 <_strtol_l.constprop.0+0x94>
 8004536:	f1be 3fff 	cmp.w	lr, #4294967295
 800453a:	d105      	bne.n	8004548 <_strtol_l.constprop.0+0xd8>
 800453c:	2322      	movs	r3, #34	; 0x22
 800453e:	6003      	str	r3, [r0, #0]
 8004540:	4646      	mov	r6, r8
 8004542:	b942      	cbnz	r2, 8004556 <_strtol_l.constprop.0+0xe6>
 8004544:	4630      	mov	r0, r6
 8004546:	e79e      	b.n	8004486 <_strtol_l.constprop.0+0x16>
 8004548:	b107      	cbz	r7, 800454c <_strtol_l.constprop.0+0xdc>
 800454a:	4276      	negs	r6, r6
 800454c:	2a00      	cmp	r2, #0
 800454e:	d0f9      	beq.n	8004544 <_strtol_l.constprop.0+0xd4>
 8004550:	f1be 0f00 	cmp.w	lr, #0
 8004554:	d000      	beq.n	8004558 <_strtol_l.constprop.0+0xe8>
 8004556:	1e69      	subs	r1, r5, #1
 8004558:	6011      	str	r1, [r2, #0]
 800455a:	e7f3      	b.n	8004544 <_strtol_l.constprop.0+0xd4>
 800455c:	2430      	movs	r4, #48	; 0x30
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1b1      	bne.n	80044c6 <_strtol_l.constprop.0+0x56>
 8004562:	2308      	movs	r3, #8
 8004564:	e7af      	b.n	80044c6 <_strtol_l.constprop.0+0x56>
 8004566:	2c30      	cmp	r4, #48	; 0x30
 8004568:	d0a5      	beq.n	80044b6 <_strtol_l.constprop.0+0x46>
 800456a:	230a      	movs	r3, #10
 800456c:	e7ab      	b.n	80044c6 <_strtol_l.constprop.0+0x56>
 800456e:	bf00      	nop
 8004570:	08005631 	.word	0x08005631

08004574 <strtol>:
 8004574:	4613      	mov	r3, r2
 8004576:	460a      	mov	r2, r1
 8004578:	4601      	mov	r1, r0
 800457a:	4802      	ldr	r0, [pc, #8]	; (8004584 <strtol+0x10>)
 800457c:	6800      	ldr	r0, [r0, #0]
 800457e:	f7ff bf77 	b.w	8004470 <_strtol_l.constprop.0>
 8004582:	bf00      	nop
 8004584:	20000068 	.word	0x20000068

08004588 <std>:
 8004588:	2300      	movs	r3, #0
 800458a:	b510      	push	{r4, lr}
 800458c:	4604      	mov	r4, r0
 800458e:	e9c0 3300 	strd	r3, r3, [r0]
 8004592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004596:	6083      	str	r3, [r0, #8]
 8004598:	8181      	strh	r1, [r0, #12]
 800459a:	6643      	str	r3, [r0, #100]	; 0x64
 800459c:	81c2      	strh	r2, [r0, #14]
 800459e:	6183      	str	r3, [r0, #24]
 80045a0:	4619      	mov	r1, r3
 80045a2:	2208      	movs	r2, #8
 80045a4:	305c      	adds	r0, #92	; 0x5c
 80045a6:	f000 fa63 	bl	8004a70 <memset>
 80045aa:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <std+0x58>)
 80045ac:	6263      	str	r3, [r4, #36]	; 0x24
 80045ae:	4b0d      	ldr	r3, [pc, #52]	; (80045e4 <std+0x5c>)
 80045b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80045b2:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <std+0x60>)
 80045b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045b6:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <std+0x64>)
 80045b8:	6323      	str	r3, [r4, #48]	; 0x30
 80045ba:	4b0d      	ldr	r3, [pc, #52]	; (80045f0 <std+0x68>)
 80045bc:	6224      	str	r4, [r4, #32]
 80045be:	429c      	cmp	r4, r3
 80045c0:	d006      	beq.n	80045d0 <std+0x48>
 80045c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80045c6:	4294      	cmp	r4, r2
 80045c8:	d002      	beq.n	80045d0 <std+0x48>
 80045ca:	33d0      	adds	r3, #208	; 0xd0
 80045cc:	429c      	cmp	r4, r3
 80045ce:	d105      	bne.n	80045dc <std+0x54>
 80045d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80045d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045d8:	f000 bac2 	b.w	8004b60 <__retarget_lock_init_recursive>
 80045dc:	bd10      	pop	{r4, pc}
 80045de:	bf00      	nop
 80045e0:	080048c1 	.word	0x080048c1
 80045e4:	080048e3 	.word	0x080048e3
 80045e8:	0800491b 	.word	0x0800491b
 80045ec:	0800493f 	.word	0x0800493f
 80045f0:	20000380 	.word	0x20000380

080045f4 <stdio_exit_handler>:
 80045f4:	4a02      	ldr	r2, [pc, #8]	; (8004600 <stdio_exit_handler+0xc>)
 80045f6:	4903      	ldr	r1, [pc, #12]	; (8004604 <stdio_exit_handler+0x10>)
 80045f8:	4803      	ldr	r0, [pc, #12]	; (8004608 <stdio_exit_handler+0x14>)
 80045fa:	f000 b87b 	b.w	80046f4 <_fwalk_sglue>
 80045fe:	bf00      	nop
 8004600:	20000010 	.word	0x20000010
 8004604:	08005429 	.word	0x08005429
 8004608:	2000001c 	.word	0x2000001c

0800460c <cleanup_stdio>:
 800460c:	6841      	ldr	r1, [r0, #4]
 800460e:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <cleanup_stdio+0x34>)
 8004610:	4299      	cmp	r1, r3
 8004612:	b510      	push	{r4, lr}
 8004614:	4604      	mov	r4, r0
 8004616:	d001      	beq.n	800461c <cleanup_stdio+0x10>
 8004618:	f000 ff06 	bl	8005428 <_fflush_r>
 800461c:	68a1      	ldr	r1, [r4, #8]
 800461e:	4b09      	ldr	r3, [pc, #36]	; (8004644 <cleanup_stdio+0x38>)
 8004620:	4299      	cmp	r1, r3
 8004622:	d002      	beq.n	800462a <cleanup_stdio+0x1e>
 8004624:	4620      	mov	r0, r4
 8004626:	f000 feff 	bl	8005428 <_fflush_r>
 800462a:	68e1      	ldr	r1, [r4, #12]
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <cleanup_stdio+0x3c>)
 800462e:	4299      	cmp	r1, r3
 8004630:	d004      	beq.n	800463c <cleanup_stdio+0x30>
 8004632:	4620      	mov	r0, r4
 8004634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004638:	f000 bef6 	b.w	8005428 <_fflush_r>
 800463c:	bd10      	pop	{r4, pc}
 800463e:	bf00      	nop
 8004640:	20000380 	.word	0x20000380
 8004644:	200003e8 	.word	0x200003e8
 8004648:	20000450 	.word	0x20000450

0800464c <global_stdio_init.part.0>:
 800464c:	b510      	push	{r4, lr}
 800464e:	4b0b      	ldr	r3, [pc, #44]	; (800467c <global_stdio_init.part.0+0x30>)
 8004650:	4c0b      	ldr	r4, [pc, #44]	; (8004680 <global_stdio_init.part.0+0x34>)
 8004652:	4a0c      	ldr	r2, [pc, #48]	; (8004684 <global_stdio_init.part.0+0x38>)
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	4620      	mov	r0, r4
 8004658:	2200      	movs	r2, #0
 800465a:	2104      	movs	r1, #4
 800465c:	f7ff ff94 	bl	8004588 <std>
 8004660:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004664:	2201      	movs	r2, #1
 8004666:	2109      	movs	r1, #9
 8004668:	f7ff ff8e 	bl	8004588 <std>
 800466c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004670:	2202      	movs	r2, #2
 8004672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004676:	2112      	movs	r1, #18
 8004678:	f7ff bf86 	b.w	8004588 <std>
 800467c:	200004b8 	.word	0x200004b8
 8004680:	20000380 	.word	0x20000380
 8004684:	080045f5 	.word	0x080045f5

08004688 <__sfp_lock_acquire>:
 8004688:	4801      	ldr	r0, [pc, #4]	; (8004690 <__sfp_lock_acquire+0x8>)
 800468a:	f000 ba6a 	b.w	8004b62 <__retarget_lock_acquire_recursive>
 800468e:	bf00      	nop
 8004690:	200004c1 	.word	0x200004c1

08004694 <__sfp_lock_release>:
 8004694:	4801      	ldr	r0, [pc, #4]	; (800469c <__sfp_lock_release+0x8>)
 8004696:	f000 ba65 	b.w	8004b64 <__retarget_lock_release_recursive>
 800469a:	bf00      	nop
 800469c:	200004c1 	.word	0x200004c1

080046a0 <__sinit>:
 80046a0:	b510      	push	{r4, lr}
 80046a2:	4604      	mov	r4, r0
 80046a4:	f7ff fff0 	bl	8004688 <__sfp_lock_acquire>
 80046a8:	6a23      	ldr	r3, [r4, #32]
 80046aa:	b11b      	cbz	r3, 80046b4 <__sinit+0x14>
 80046ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046b0:	f7ff bff0 	b.w	8004694 <__sfp_lock_release>
 80046b4:	4b04      	ldr	r3, [pc, #16]	; (80046c8 <__sinit+0x28>)
 80046b6:	6223      	str	r3, [r4, #32]
 80046b8:	4b04      	ldr	r3, [pc, #16]	; (80046cc <__sinit+0x2c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1f5      	bne.n	80046ac <__sinit+0xc>
 80046c0:	f7ff ffc4 	bl	800464c <global_stdio_init.part.0>
 80046c4:	e7f2      	b.n	80046ac <__sinit+0xc>
 80046c6:	bf00      	nop
 80046c8:	0800460d 	.word	0x0800460d
 80046cc:	200004b8 	.word	0x200004b8

080046d0 <fiprintf>:
 80046d0:	b40e      	push	{r1, r2, r3}
 80046d2:	b503      	push	{r0, r1, lr}
 80046d4:	4601      	mov	r1, r0
 80046d6:	ab03      	add	r3, sp, #12
 80046d8:	4805      	ldr	r0, [pc, #20]	; (80046f0 <fiprintf+0x20>)
 80046da:	f853 2b04 	ldr.w	r2, [r3], #4
 80046de:	6800      	ldr	r0, [r0, #0]
 80046e0:	9301      	str	r3, [sp, #4]
 80046e2:	f000 fb71 	bl	8004dc8 <_vfiprintf_r>
 80046e6:	b002      	add	sp, #8
 80046e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80046ec:	b003      	add	sp, #12
 80046ee:	4770      	bx	lr
 80046f0:	20000068 	.word	0x20000068

080046f4 <_fwalk_sglue>:
 80046f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046f8:	4607      	mov	r7, r0
 80046fa:	4688      	mov	r8, r1
 80046fc:	4614      	mov	r4, r2
 80046fe:	2600      	movs	r6, #0
 8004700:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004704:	f1b9 0901 	subs.w	r9, r9, #1
 8004708:	d505      	bpl.n	8004716 <_fwalk_sglue+0x22>
 800470a:	6824      	ldr	r4, [r4, #0]
 800470c:	2c00      	cmp	r4, #0
 800470e:	d1f7      	bne.n	8004700 <_fwalk_sglue+0xc>
 8004710:	4630      	mov	r0, r6
 8004712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004716:	89ab      	ldrh	r3, [r5, #12]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d907      	bls.n	800472c <_fwalk_sglue+0x38>
 800471c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004720:	3301      	adds	r3, #1
 8004722:	d003      	beq.n	800472c <_fwalk_sglue+0x38>
 8004724:	4629      	mov	r1, r5
 8004726:	4638      	mov	r0, r7
 8004728:	47c0      	blx	r8
 800472a:	4306      	orrs	r6, r0
 800472c:	3568      	adds	r5, #104	; 0x68
 800472e:	e7e9      	b.n	8004704 <_fwalk_sglue+0x10>

08004730 <_fwrite_r>:
 8004730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004734:	9c08      	ldr	r4, [sp, #32]
 8004736:	468a      	mov	sl, r1
 8004738:	4690      	mov	r8, r2
 800473a:	fb02 f903 	mul.w	r9, r2, r3
 800473e:	4606      	mov	r6, r0
 8004740:	b118      	cbz	r0, 800474a <_fwrite_r+0x1a>
 8004742:	6a03      	ldr	r3, [r0, #32]
 8004744:	b90b      	cbnz	r3, 800474a <_fwrite_r+0x1a>
 8004746:	f7ff ffab 	bl	80046a0 <__sinit>
 800474a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800474c:	07dd      	lsls	r5, r3, #31
 800474e:	d405      	bmi.n	800475c <_fwrite_r+0x2c>
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	0598      	lsls	r0, r3, #22
 8004754:	d402      	bmi.n	800475c <_fwrite_r+0x2c>
 8004756:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004758:	f000 fa03 	bl	8004b62 <__retarget_lock_acquire_recursive>
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	0719      	lsls	r1, r3, #28
 8004760:	d516      	bpl.n	8004790 <_fwrite_r+0x60>
 8004762:	6923      	ldr	r3, [r4, #16]
 8004764:	b1a3      	cbz	r3, 8004790 <_fwrite_r+0x60>
 8004766:	2500      	movs	r5, #0
 8004768:	454d      	cmp	r5, r9
 800476a:	d01f      	beq.n	80047ac <_fwrite_r+0x7c>
 800476c:	68a7      	ldr	r7, [r4, #8]
 800476e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8004772:	3f01      	subs	r7, #1
 8004774:	2f00      	cmp	r7, #0
 8004776:	60a7      	str	r7, [r4, #8]
 8004778:	da04      	bge.n	8004784 <_fwrite_r+0x54>
 800477a:	69a3      	ldr	r3, [r4, #24]
 800477c:	429f      	cmp	r7, r3
 800477e:	db0f      	blt.n	80047a0 <_fwrite_r+0x70>
 8004780:	290a      	cmp	r1, #10
 8004782:	d00d      	beq.n	80047a0 <_fwrite_r+0x70>
 8004784:	6823      	ldr	r3, [r4, #0]
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	6022      	str	r2, [r4, #0]
 800478a:	7019      	strb	r1, [r3, #0]
 800478c:	3501      	adds	r5, #1
 800478e:	e7eb      	b.n	8004768 <_fwrite_r+0x38>
 8004790:	4621      	mov	r1, r4
 8004792:	4630      	mov	r0, r6
 8004794:	f000 f914 	bl	80049c0 <__swsetup_r>
 8004798:	2800      	cmp	r0, #0
 800479a:	d0e4      	beq.n	8004766 <_fwrite_r+0x36>
 800479c:	2500      	movs	r5, #0
 800479e:	e005      	b.n	80047ac <_fwrite_r+0x7c>
 80047a0:	4622      	mov	r2, r4
 80047a2:	4630      	mov	r0, r6
 80047a4:	f000 f8cf 	bl	8004946 <__swbuf_r>
 80047a8:	3001      	adds	r0, #1
 80047aa:	d1ef      	bne.n	800478c <_fwrite_r+0x5c>
 80047ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047ae:	07da      	lsls	r2, r3, #31
 80047b0:	d405      	bmi.n	80047be <_fwrite_r+0x8e>
 80047b2:	89a3      	ldrh	r3, [r4, #12]
 80047b4:	059b      	lsls	r3, r3, #22
 80047b6:	d402      	bmi.n	80047be <_fwrite_r+0x8e>
 80047b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047ba:	f000 f9d3 	bl	8004b64 <__retarget_lock_release_recursive>
 80047be:	fbb5 f0f8 	udiv	r0, r5, r8
 80047c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080047c8 <fwrite>:
 80047c8:	b507      	push	{r0, r1, r2, lr}
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	4613      	mov	r3, r2
 80047ce:	460a      	mov	r2, r1
 80047d0:	4601      	mov	r1, r0
 80047d2:	4803      	ldr	r0, [pc, #12]	; (80047e0 <fwrite+0x18>)
 80047d4:	6800      	ldr	r0, [r0, #0]
 80047d6:	f7ff ffab 	bl	8004730 <_fwrite_r>
 80047da:	b003      	add	sp, #12
 80047dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80047e0:	20000068 	.word	0x20000068

080047e4 <iprintf>:
 80047e4:	b40f      	push	{r0, r1, r2, r3}
 80047e6:	b507      	push	{r0, r1, r2, lr}
 80047e8:	4906      	ldr	r1, [pc, #24]	; (8004804 <iprintf+0x20>)
 80047ea:	ab04      	add	r3, sp, #16
 80047ec:	6808      	ldr	r0, [r1, #0]
 80047ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80047f2:	6881      	ldr	r1, [r0, #8]
 80047f4:	9301      	str	r3, [sp, #4]
 80047f6:	f000 fae7 	bl	8004dc8 <_vfiprintf_r>
 80047fa:	b003      	add	sp, #12
 80047fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004800:	b004      	add	sp, #16
 8004802:	4770      	bx	lr
 8004804:	20000068 	.word	0x20000068

08004808 <_puts_r>:
 8004808:	6a03      	ldr	r3, [r0, #32]
 800480a:	b570      	push	{r4, r5, r6, lr}
 800480c:	6884      	ldr	r4, [r0, #8]
 800480e:	4605      	mov	r5, r0
 8004810:	460e      	mov	r6, r1
 8004812:	b90b      	cbnz	r3, 8004818 <_puts_r+0x10>
 8004814:	f7ff ff44 	bl	80046a0 <__sinit>
 8004818:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800481a:	07db      	lsls	r3, r3, #31
 800481c:	d405      	bmi.n	800482a <_puts_r+0x22>
 800481e:	89a3      	ldrh	r3, [r4, #12]
 8004820:	0598      	lsls	r0, r3, #22
 8004822:	d402      	bmi.n	800482a <_puts_r+0x22>
 8004824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004826:	f000 f99c 	bl	8004b62 <__retarget_lock_acquire_recursive>
 800482a:	89a3      	ldrh	r3, [r4, #12]
 800482c:	0719      	lsls	r1, r3, #28
 800482e:	d513      	bpl.n	8004858 <_puts_r+0x50>
 8004830:	6923      	ldr	r3, [r4, #16]
 8004832:	b18b      	cbz	r3, 8004858 <_puts_r+0x50>
 8004834:	3e01      	subs	r6, #1
 8004836:	68a3      	ldr	r3, [r4, #8]
 8004838:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800483c:	3b01      	subs	r3, #1
 800483e:	60a3      	str	r3, [r4, #8]
 8004840:	b9e9      	cbnz	r1, 800487e <_puts_r+0x76>
 8004842:	2b00      	cmp	r3, #0
 8004844:	da2e      	bge.n	80048a4 <_puts_r+0x9c>
 8004846:	4622      	mov	r2, r4
 8004848:	210a      	movs	r1, #10
 800484a:	4628      	mov	r0, r5
 800484c:	f000 f87b 	bl	8004946 <__swbuf_r>
 8004850:	3001      	adds	r0, #1
 8004852:	d007      	beq.n	8004864 <_puts_r+0x5c>
 8004854:	250a      	movs	r5, #10
 8004856:	e007      	b.n	8004868 <_puts_r+0x60>
 8004858:	4621      	mov	r1, r4
 800485a:	4628      	mov	r0, r5
 800485c:	f000 f8b0 	bl	80049c0 <__swsetup_r>
 8004860:	2800      	cmp	r0, #0
 8004862:	d0e7      	beq.n	8004834 <_puts_r+0x2c>
 8004864:	f04f 35ff 	mov.w	r5, #4294967295
 8004868:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800486a:	07da      	lsls	r2, r3, #31
 800486c:	d405      	bmi.n	800487a <_puts_r+0x72>
 800486e:	89a3      	ldrh	r3, [r4, #12]
 8004870:	059b      	lsls	r3, r3, #22
 8004872:	d402      	bmi.n	800487a <_puts_r+0x72>
 8004874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004876:	f000 f975 	bl	8004b64 <__retarget_lock_release_recursive>
 800487a:	4628      	mov	r0, r5
 800487c:	bd70      	pop	{r4, r5, r6, pc}
 800487e:	2b00      	cmp	r3, #0
 8004880:	da04      	bge.n	800488c <_puts_r+0x84>
 8004882:	69a2      	ldr	r2, [r4, #24]
 8004884:	429a      	cmp	r2, r3
 8004886:	dc06      	bgt.n	8004896 <_puts_r+0x8e>
 8004888:	290a      	cmp	r1, #10
 800488a:	d004      	beq.n	8004896 <_puts_r+0x8e>
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	6022      	str	r2, [r4, #0]
 8004892:	7019      	strb	r1, [r3, #0]
 8004894:	e7cf      	b.n	8004836 <_puts_r+0x2e>
 8004896:	4622      	mov	r2, r4
 8004898:	4628      	mov	r0, r5
 800489a:	f000 f854 	bl	8004946 <__swbuf_r>
 800489e:	3001      	adds	r0, #1
 80048a0:	d1c9      	bne.n	8004836 <_puts_r+0x2e>
 80048a2:	e7df      	b.n	8004864 <_puts_r+0x5c>
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	250a      	movs	r5, #10
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	6022      	str	r2, [r4, #0]
 80048ac:	701d      	strb	r5, [r3, #0]
 80048ae:	e7db      	b.n	8004868 <_puts_r+0x60>

080048b0 <puts>:
 80048b0:	4b02      	ldr	r3, [pc, #8]	; (80048bc <puts+0xc>)
 80048b2:	4601      	mov	r1, r0
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	f7ff bfa7 	b.w	8004808 <_puts_r>
 80048ba:	bf00      	nop
 80048bc:	20000068 	.word	0x20000068

080048c0 <__sread>:
 80048c0:	b510      	push	{r4, lr}
 80048c2:	460c      	mov	r4, r1
 80048c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c8:	f000 f8fc 	bl	8004ac4 <_read_r>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	bfab      	itete	ge
 80048d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048d2:	89a3      	ldrhlt	r3, [r4, #12]
 80048d4:	181b      	addge	r3, r3, r0
 80048d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048da:	bfac      	ite	ge
 80048dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80048de:	81a3      	strhlt	r3, [r4, #12]
 80048e0:	bd10      	pop	{r4, pc}

080048e2 <__swrite>:
 80048e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e6:	461f      	mov	r7, r3
 80048e8:	898b      	ldrh	r3, [r1, #12]
 80048ea:	05db      	lsls	r3, r3, #23
 80048ec:	4605      	mov	r5, r0
 80048ee:	460c      	mov	r4, r1
 80048f0:	4616      	mov	r6, r2
 80048f2:	d505      	bpl.n	8004900 <__swrite+0x1e>
 80048f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048f8:	2302      	movs	r3, #2
 80048fa:	2200      	movs	r2, #0
 80048fc:	f000 f8d0 	bl	8004aa0 <_lseek_r>
 8004900:	89a3      	ldrh	r3, [r4, #12]
 8004902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800490a:	81a3      	strh	r3, [r4, #12]
 800490c:	4632      	mov	r2, r6
 800490e:	463b      	mov	r3, r7
 8004910:	4628      	mov	r0, r5
 8004912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004916:	f000 b8e7 	b.w	8004ae8 <_write_r>

0800491a <__sseek>:
 800491a:	b510      	push	{r4, lr}
 800491c:	460c      	mov	r4, r1
 800491e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004922:	f000 f8bd 	bl	8004aa0 <_lseek_r>
 8004926:	1c43      	adds	r3, r0, #1
 8004928:	89a3      	ldrh	r3, [r4, #12]
 800492a:	bf15      	itete	ne
 800492c:	6560      	strne	r0, [r4, #84]	; 0x54
 800492e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004932:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004936:	81a3      	strheq	r3, [r4, #12]
 8004938:	bf18      	it	ne
 800493a:	81a3      	strhne	r3, [r4, #12]
 800493c:	bd10      	pop	{r4, pc}

0800493e <__sclose>:
 800493e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004942:	f000 b89d 	b.w	8004a80 <_close_r>

08004946 <__swbuf_r>:
 8004946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004948:	460e      	mov	r6, r1
 800494a:	4614      	mov	r4, r2
 800494c:	4605      	mov	r5, r0
 800494e:	b118      	cbz	r0, 8004958 <__swbuf_r+0x12>
 8004950:	6a03      	ldr	r3, [r0, #32]
 8004952:	b90b      	cbnz	r3, 8004958 <__swbuf_r+0x12>
 8004954:	f7ff fea4 	bl	80046a0 <__sinit>
 8004958:	69a3      	ldr	r3, [r4, #24]
 800495a:	60a3      	str	r3, [r4, #8]
 800495c:	89a3      	ldrh	r3, [r4, #12]
 800495e:	071a      	lsls	r2, r3, #28
 8004960:	d525      	bpl.n	80049ae <__swbuf_r+0x68>
 8004962:	6923      	ldr	r3, [r4, #16]
 8004964:	b31b      	cbz	r3, 80049ae <__swbuf_r+0x68>
 8004966:	6823      	ldr	r3, [r4, #0]
 8004968:	6922      	ldr	r2, [r4, #16]
 800496a:	1a98      	subs	r0, r3, r2
 800496c:	6963      	ldr	r3, [r4, #20]
 800496e:	b2f6      	uxtb	r6, r6
 8004970:	4283      	cmp	r3, r0
 8004972:	4637      	mov	r7, r6
 8004974:	dc04      	bgt.n	8004980 <__swbuf_r+0x3a>
 8004976:	4621      	mov	r1, r4
 8004978:	4628      	mov	r0, r5
 800497a:	f000 fd55 	bl	8005428 <_fflush_r>
 800497e:	b9e0      	cbnz	r0, 80049ba <__swbuf_r+0x74>
 8004980:	68a3      	ldr	r3, [r4, #8]
 8004982:	3b01      	subs	r3, #1
 8004984:	60a3      	str	r3, [r4, #8]
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	6022      	str	r2, [r4, #0]
 800498c:	701e      	strb	r6, [r3, #0]
 800498e:	6962      	ldr	r2, [r4, #20]
 8004990:	1c43      	adds	r3, r0, #1
 8004992:	429a      	cmp	r2, r3
 8004994:	d004      	beq.n	80049a0 <__swbuf_r+0x5a>
 8004996:	89a3      	ldrh	r3, [r4, #12]
 8004998:	07db      	lsls	r3, r3, #31
 800499a:	d506      	bpl.n	80049aa <__swbuf_r+0x64>
 800499c:	2e0a      	cmp	r6, #10
 800499e:	d104      	bne.n	80049aa <__swbuf_r+0x64>
 80049a0:	4621      	mov	r1, r4
 80049a2:	4628      	mov	r0, r5
 80049a4:	f000 fd40 	bl	8005428 <_fflush_r>
 80049a8:	b938      	cbnz	r0, 80049ba <__swbuf_r+0x74>
 80049aa:	4638      	mov	r0, r7
 80049ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049ae:	4621      	mov	r1, r4
 80049b0:	4628      	mov	r0, r5
 80049b2:	f000 f805 	bl	80049c0 <__swsetup_r>
 80049b6:	2800      	cmp	r0, #0
 80049b8:	d0d5      	beq.n	8004966 <__swbuf_r+0x20>
 80049ba:	f04f 37ff 	mov.w	r7, #4294967295
 80049be:	e7f4      	b.n	80049aa <__swbuf_r+0x64>

080049c0 <__swsetup_r>:
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	4b2a      	ldr	r3, [pc, #168]	; (8004a6c <__swsetup_r+0xac>)
 80049c4:	4605      	mov	r5, r0
 80049c6:	6818      	ldr	r0, [r3, #0]
 80049c8:	460c      	mov	r4, r1
 80049ca:	b118      	cbz	r0, 80049d4 <__swsetup_r+0x14>
 80049cc:	6a03      	ldr	r3, [r0, #32]
 80049ce:	b90b      	cbnz	r3, 80049d4 <__swsetup_r+0x14>
 80049d0:	f7ff fe66 	bl	80046a0 <__sinit>
 80049d4:	89a3      	ldrh	r3, [r4, #12]
 80049d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049da:	0718      	lsls	r0, r3, #28
 80049dc:	d422      	bmi.n	8004a24 <__swsetup_r+0x64>
 80049de:	06d9      	lsls	r1, r3, #27
 80049e0:	d407      	bmi.n	80049f2 <__swsetup_r+0x32>
 80049e2:	2309      	movs	r3, #9
 80049e4:	602b      	str	r3, [r5, #0]
 80049e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80049ea:	81a3      	strh	r3, [r4, #12]
 80049ec:	f04f 30ff 	mov.w	r0, #4294967295
 80049f0:	e034      	b.n	8004a5c <__swsetup_r+0x9c>
 80049f2:	0758      	lsls	r0, r3, #29
 80049f4:	d512      	bpl.n	8004a1c <__swsetup_r+0x5c>
 80049f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049f8:	b141      	cbz	r1, 8004a0c <__swsetup_r+0x4c>
 80049fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049fe:	4299      	cmp	r1, r3
 8004a00:	d002      	beq.n	8004a08 <__swsetup_r+0x48>
 8004a02:	4628      	mov	r0, r5
 8004a04:	f000 f8be 	bl	8004b84 <_free_r>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	6363      	str	r3, [r4, #52]	; 0x34
 8004a0c:	89a3      	ldrh	r3, [r4, #12]
 8004a0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a12:	81a3      	strh	r3, [r4, #12]
 8004a14:	2300      	movs	r3, #0
 8004a16:	6063      	str	r3, [r4, #4]
 8004a18:	6923      	ldr	r3, [r4, #16]
 8004a1a:	6023      	str	r3, [r4, #0]
 8004a1c:	89a3      	ldrh	r3, [r4, #12]
 8004a1e:	f043 0308 	orr.w	r3, r3, #8
 8004a22:	81a3      	strh	r3, [r4, #12]
 8004a24:	6923      	ldr	r3, [r4, #16]
 8004a26:	b94b      	cbnz	r3, 8004a3c <__swsetup_r+0x7c>
 8004a28:	89a3      	ldrh	r3, [r4, #12]
 8004a2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a32:	d003      	beq.n	8004a3c <__swsetup_r+0x7c>
 8004a34:	4621      	mov	r1, r4
 8004a36:	4628      	mov	r0, r5
 8004a38:	f000 fd44 	bl	80054c4 <__smakebuf_r>
 8004a3c:	89a0      	ldrh	r0, [r4, #12]
 8004a3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a42:	f010 0301 	ands.w	r3, r0, #1
 8004a46:	d00a      	beq.n	8004a5e <__swsetup_r+0x9e>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60a3      	str	r3, [r4, #8]
 8004a4c:	6963      	ldr	r3, [r4, #20]
 8004a4e:	425b      	negs	r3, r3
 8004a50:	61a3      	str	r3, [r4, #24]
 8004a52:	6923      	ldr	r3, [r4, #16]
 8004a54:	b943      	cbnz	r3, 8004a68 <__swsetup_r+0xa8>
 8004a56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a5a:	d1c4      	bne.n	80049e6 <__swsetup_r+0x26>
 8004a5c:	bd38      	pop	{r3, r4, r5, pc}
 8004a5e:	0781      	lsls	r1, r0, #30
 8004a60:	bf58      	it	pl
 8004a62:	6963      	ldrpl	r3, [r4, #20]
 8004a64:	60a3      	str	r3, [r4, #8]
 8004a66:	e7f4      	b.n	8004a52 <__swsetup_r+0x92>
 8004a68:	2000      	movs	r0, #0
 8004a6a:	e7f7      	b.n	8004a5c <__swsetup_r+0x9c>
 8004a6c:	20000068 	.word	0x20000068

08004a70 <memset>:
 8004a70:	4402      	add	r2, r0
 8004a72:	4603      	mov	r3, r0
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d100      	bne.n	8004a7a <memset+0xa>
 8004a78:	4770      	bx	lr
 8004a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a7e:	e7f9      	b.n	8004a74 <memset+0x4>

08004a80 <_close_r>:
 8004a80:	b538      	push	{r3, r4, r5, lr}
 8004a82:	4d06      	ldr	r5, [pc, #24]	; (8004a9c <_close_r+0x1c>)
 8004a84:	2300      	movs	r3, #0
 8004a86:	4604      	mov	r4, r0
 8004a88:	4608      	mov	r0, r1
 8004a8a:	602b      	str	r3, [r5, #0]
 8004a8c:	f7fc fae7 	bl	800105e <_close>
 8004a90:	1c43      	adds	r3, r0, #1
 8004a92:	d102      	bne.n	8004a9a <_close_r+0x1a>
 8004a94:	682b      	ldr	r3, [r5, #0]
 8004a96:	b103      	cbz	r3, 8004a9a <_close_r+0x1a>
 8004a98:	6023      	str	r3, [r4, #0]
 8004a9a:	bd38      	pop	{r3, r4, r5, pc}
 8004a9c:	200004bc 	.word	0x200004bc

08004aa0 <_lseek_r>:
 8004aa0:	b538      	push	{r3, r4, r5, lr}
 8004aa2:	4d07      	ldr	r5, [pc, #28]	; (8004ac0 <_lseek_r+0x20>)
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	4608      	mov	r0, r1
 8004aa8:	4611      	mov	r1, r2
 8004aaa:	2200      	movs	r2, #0
 8004aac:	602a      	str	r2, [r5, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f7fc fafc 	bl	80010ac <_lseek>
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	d102      	bne.n	8004abe <_lseek_r+0x1e>
 8004ab8:	682b      	ldr	r3, [r5, #0]
 8004aba:	b103      	cbz	r3, 8004abe <_lseek_r+0x1e>
 8004abc:	6023      	str	r3, [r4, #0]
 8004abe:	bd38      	pop	{r3, r4, r5, pc}
 8004ac0:	200004bc 	.word	0x200004bc

08004ac4 <_read_r>:
 8004ac4:	b538      	push	{r3, r4, r5, lr}
 8004ac6:	4d07      	ldr	r5, [pc, #28]	; (8004ae4 <_read_r+0x20>)
 8004ac8:	4604      	mov	r4, r0
 8004aca:	4608      	mov	r0, r1
 8004acc:	4611      	mov	r1, r2
 8004ace:	2200      	movs	r2, #0
 8004ad0:	602a      	str	r2, [r5, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f7fc fa8a 	bl	8000fec <_read>
 8004ad8:	1c43      	adds	r3, r0, #1
 8004ada:	d102      	bne.n	8004ae2 <_read_r+0x1e>
 8004adc:	682b      	ldr	r3, [r5, #0]
 8004ade:	b103      	cbz	r3, 8004ae2 <_read_r+0x1e>
 8004ae0:	6023      	str	r3, [r4, #0]
 8004ae2:	bd38      	pop	{r3, r4, r5, pc}
 8004ae4:	200004bc 	.word	0x200004bc

08004ae8 <_write_r>:
 8004ae8:	b538      	push	{r3, r4, r5, lr}
 8004aea:	4d07      	ldr	r5, [pc, #28]	; (8004b08 <_write_r+0x20>)
 8004aec:	4604      	mov	r4, r0
 8004aee:	4608      	mov	r0, r1
 8004af0:	4611      	mov	r1, r2
 8004af2:	2200      	movs	r2, #0
 8004af4:	602a      	str	r2, [r5, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	f7fc fa95 	bl	8001026 <_write>
 8004afc:	1c43      	adds	r3, r0, #1
 8004afe:	d102      	bne.n	8004b06 <_write_r+0x1e>
 8004b00:	682b      	ldr	r3, [r5, #0]
 8004b02:	b103      	cbz	r3, 8004b06 <_write_r+0x1e>
 8004b04:	6023      	str	r3, [r4, #0]
 8004b06:	bd38      	pop	{r3, r4, r5, pc}
 8004b08:	200004bc 	.word	0x200004bc

08004b0c <__errno>:
 8004b0c:	4b01      	ldr	r3, [pc, #4]	; (8004b14 <__errno+0x8>)
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	20000068 	.word	0x20000068

08004b18 <__libc_init_array>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	4d0d      	ldr	r5, [pc, #52]	; (8004b50 <__libc_init_array+0x38>)
 8004b1c:	4c0d      	ldr	r4, [pc, #52]	; (8004b54 <__libc_init_array+0x3c>)
 8004b1e:	1b64      	subs	r4, r4, r5
 8004b20:	10a4      	asrs	r4, r4, #2
 8004b22:	2600      	movs	r6, #0
 8004b24:	42a6      	cmp	r6, r4
 8004b26:	d109      	bne.n	8004b3c <__libc_init_array+0x24>
 8004b28:	4d0b      	ldr	r5, [pc, #44]	; (8004b58 <__libc_init_array+0x40>)
 8004b2a:	4c0c      	ldr	r4, [pc, #48]	; (8004b5c <__libc_init_array+0x44>)
 8004b2c:	f000 fd38 	bl	80055a0 <_init>
 8004b30:	1b64      	subs	r4, r4, r5
 8004b32:	10a4      	asrs	r4, r4, #2
 8004b34:	2600      	movs	r6, #0
 8004b36:	42a6      	cmp	r6, r4
 8004b38:	d105      	bne.n	8004b46 <__libc_init_array+0x2e>
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
 8004b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b40:	4798      	blx	r3
 8004b42:	3601      	adds	r6, #1
 8004b44:	e7ee      	b.n	8004b24 <__libc_init_array+0xc>
 8004b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b4a:	4798      	blx	r3
 8004b4c:	3601      	adds	r6, #1
 8004b4e:	e7f2      	b.n	8004b36 <__libc_init_array+0x1e>
 8004b50:	0800576c 	.word	0x0800576c
 8004b54:	0800576c 	.word	0x0800576c
 8004b58:	0800576c 	.word	0x0800576c
 8004b5c:	08005770 	.word	0x08005770

08004b60 <__retarget_lock_init_recursive>:
 8004b60:	4770      	bx	lr

08004b62 <__retarget_lock_acquire_recursive>:
 8004b62:	4770      	bx	lr

08004b64 <__retarget_lock_release_recursive>:
 8004b64:	4770      	bx	lr

08004b66 <memcpy>:
 8004b66:	440a      	add	r2, r1
 8004b68:	4291      	cmp	r1, r2
 8004b6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b6e:	d100      	bne.n	8004b72 <memcpy+0xc>
 8004b70:	4770      	bx	lr
 8004b72:	b510      	push	{r4, lr}
 8004b74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b7c:	4291      	cmp	r1, r2
 8004b7e:	d1f9      	bne.n	8004b74 <memcpy+0xe>
 8004b80:	bd10      	pop	{r4, pc}
	...

08004b84 <_free_r>:
 8004b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b86:	2900      	cmp	r1, #0
 8004b88:	d044      	beq.n	8004c14 <_free_r+0x90>
 8004b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b8e:	9001      	str	r0, [sp, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f1a1 0404 	sub.w	r4, r1, #4
 8004b96:	bfb8      	it	lt
 8004b98:	18e4      	addlt	r4, r4, r3
 8004b9a:	f000 f8df 	bl	8004d5c <__malloc_lock>
 8004b9e:	4a1e      	ldr	r2, [pc, #120]	; (8004c18 <_free_r+0x94>)
 8004ba0:	9801      	ldr	r0, [sp, #4]
 8004ba2:	6813      	ldr	r3, [r2, #0]
 8004ba4:	b933      	cbnz	r3, 8004bb4 <_free_r+0x30>
 8004ba6:	6063      	str	r3, [r4, #4]
 8004ba8:	6014      	str	r4, [r2, #0]
 8004baa:	b003      	add	sp, #12
 8004bac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bb0:	f000 b8da 	b.w	8004d68 <__malloc_unlock>
 8004bb4:	42a3      	cmp	r3, r4
 8004bb6:	d908      	bls.n	8004bca <_free_r+0x46>
 8004bb8:	6825      	ldr	r5, [r4, #0]
 8004bba:	1961      	adds	r1, r4, r5
 8004bbc:	428b      	cmp	r3, r1
 8004bbe:	bf01      	itttt	eq
 8004bc0:	6819      	ldreq	r1, [r3, #0]
 8004bc2:	685b      	ldreq	r3, [r3, #4]
 8004bc4:	1949      	addeq	r1, r1, r5
 8004bc6:	6021      	streq	r1, [r4, #0]
 8004bc8:	e7ed      	b.n	8004ba6 <_free_r+0x22>
 8004bca:	461a      	mov	r2, r3
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	b10b      	cbz	r3, 8004bd4 <_free_r+0x50>
 8004bd0:	42a3      	cmp	r3, r4
 8004bd2:	d9fa      	bls.n	8004bca <_free_r+0x46>
 8004bd4:	6811      	ldr	r1, [r2, #0]
 8004bd6:	1855      	adds	r5, r2, r1
 8004bd8:	42a5      	cmp	r5, r4
 8004bda:	d10b      	bne.n	8004bf4 <_free_r+0x70>
 8004bdc:	6824      	ldr	r4, [r4, #0]
 8004bde:	4421      	add	r1, r4
 8004be0:	1854      	adds	r4, r2, r1
 8004be2:	42a3      	cmp	r3, r4
 8004be4:	6011      	str	r1, [r2, #0]
 8004be6:	d1e0      	bne.n	8004baa <_free_r+0x26>
 8004be8:	681c      	ldr	r4, [r3, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	6053      	str	r3, [r2, #4]
 8004bee:	440c      	add	r4, r1
 8004bf0:	6014      	str	r4, [r2, #0]
 8004bf2:	e7da      	b.n	8004baa <_free_r+0x26>
 8004bf4:	d902      	bls.n	8004bfc <_free_r+0x78>
 8004bf6:	230c      	movs	r3, #12
 8004bf8:	6003      	str	r3, [r0, #0]
 8004bfa:	e7d6      	b.n	8004baa <_free_r+0x26>
 8004bfc:	6825      	ldr	r5, [r4, #0]
 8004bfe:	1961      	adds	r1, r4, r5
 8004c00:	428b      	cmp	r3, r1
 8004c02:	bf04      	itt	eq
 8004c04:	6819      	ldreq	r1, [r3, #0]
 8004c06:	685b      	ldreq	r3, [r3, #4]
 8004c08:	6063      	str	r3, [r4, #4]
 8004c0a:	bf04      	itt	eq
 8004c0c:	1949      	addeq	r1, r1, r5
 8004c0e:	6021      	streq	r1, [r4, #0]
 8004c10:	6054      	str	r4, [r2, #4]
 8004c12:	e7ca      	b.n	8004baa <_free_r+0x26>
 8004c14:	b003      	add	sp, #12
 8004c16:	bd30      	pop	{r4, r5, pc}
 8004c18:	200004c4 	.word	0x200004c4

08004c1c <sbrk_aligned>:
 8004c1c:	b570      	push	{r4, r5, r6, lr}
 8004c1e:	4e0e      	ldr	r6, [pc, #56]	; (8004c58 <sbrk_aligned+0x3c>)
 8004c20:	460c      	mov	r4, r1
 8004c22:	6831      	ldr	r1, [r6, #0]
 8004c24:	4605      	mov	r5, r0
 8004c26:	b911      	cbnz	r1, 8004c2e <sbrk_aligned+0x12>
 8004c28:	f000 fcaa 	bl	8005580 <_sbrk_r>
 8004c2c:	6030      	str	r0, [r6, #0]
 8004c2e:	4621      	mov	r1, r4
 8004c30:	4628      	mov	r0, r5
 8004c32:	f000 fca5 	bl	8005580 <_sbrk_r>
 8004c36:	1c43      	adds	r3, r0, #1
 8004c38:	d00a      	beq.n	8004c50 <sbrk_aligned+0x34>
 8004c3a:	1cc4      	adds	r4, r0, #3
 8004c3c:	f024 0403 	bic.w	r4, r4, #3
 8004c40:	42a0      	cmp	r0, r4
 8004c42:	d007      	beq.n	8004c54 <sbrk_aligned+0x38>
 8004c44:	1a21      	subs	r1, r4, r0
 8004c46:	4628      	mov	r0, r5
 8004c48:	f000 fc9a 	bl	8005580 <_sbrk_r>
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	d101      	bne.n	8004c54 <sbrk_aligned+0x38>
 8004c50:	f04f 34ff 	mov.w	r4, #4294967295
 8004c54:	4620      	mov	r0, r4
 8004c56:	bd70      	pop	{r4, r5, r6, pc}
 8004c58:	200004c8 	.word	0x200004c8

08004c5c <_malloc_r>:
 8004c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c60:	1ccd      	adds	r5, r1, #3
 8004c62:	f025 0503 	bic.w	r5, r5, #3
 8004c66:	3508      	adds	r5, #8
 8004c68:	2d0c      	cmp	r5, #12
 8004c6a:	bf38      	it	cc
 8004c6c:	250c      	movcc	r5, #12
 8004c6e:	2d00      	cmp	r5, #0
 8004c70:	4607      	mov	r7, r0
 8004c72:	db01      	blt.n	8004c78 <_malloc_r+0x1c>
 8004c74:	42a9      	cmp	r1, r5
 8004c76:	d905      	bls.n	8004c84 <_malloc_r+0x28>
 8004c78:	230c      	movs	r3, #12
 8004c7a:	603b      	str	r3, [r7, #0]
 8004c7c:	2600      	movs	r6, #0
 8004c7e:	4630      	mov	r0, r6
 8004c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004d58 <_malloc_r+0xfc>
 8004c88:	f000 f868 	bl	8004d5c <__malloc_lock>
 8004c8c:	f8d8 3000 	ldr.w	r3, [r8]
 8004c90:	461c      	mov	r4, r3
 8004c92:	bb5c      	cbnz	r4, 8004cec <_malloc_r+0x90>
 8004c94:	4629      	mov	r1, r5
 8004c96:	4638      	mov	r0, r7
 8004c98:	f7ff ffc0 	bl	8004c1c <sbrk_aligned>
 8004c9c:	1c43      	adds	r3, r0, #1
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	d155      	bne.n	8004d4e <_malloc_r+0xf2>
 8004ca2:	f8d8 4000 	ldr.w	r4, [r8]
 8004ca6:	4626      	mov	r6, r4
 8004ca8:	2e00      	cmp	r6, #0
 8004caa:	d145      	bne.n	8004d38 <_malloc_r+0xdc>
 8004cac:	2c00      	cmp	r4, #0
 8004cae:	d048      	beq.n	8004d42 <_malloc_r+0xe6>
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	4631      	mov	r1, r6
 8004cb4:	4638      	mov	r0, r7
 8004cb6:	eb04 0903 	add.w	r9, r4, r3
 8004cba:	f000 fc61 	bl	8005580 <_sbrk_r>
 8004cbe:	4581      	cmp	r9, r0
 8004cc0:	d13f      	bne.n	8004d42 <_malloc_r+0xe6>
 8004cc2:	6821      	ldr	r1, [r4, #0]
 8004cc4:	1a6d      	subs	r5, r5, r1
 8004cc6:	4629      	mov	r1, r5
 8004cc8:	4638      	mov	r0, r7
 8004cca:	f7ff ffa7 	bl	8004c1c <sbrk_aligned>
 8004cce:	3001      	adds	r0, #1
 8004cd0:	d037      	beq.n	8004d42 <_malloc_r+0xe6>
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	442b      	add	r3, r5
 8004cd6:	6023      	str	r3, [r4, #0]
 8004cd8:	f8d8 3000 	ldr.w	r3, [r8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d038      	beq.n	8004d52 <_malloc_r+0xf6>
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	42a2      	cmp	r2, r4
 8004ce4:	d12b      	bne.n	8004d3e <_malloc_r+0xe2>
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	605a      	str	r2, [r3, #4]
 8004cea:	e00f      	b.n	8004d0c <_malloc_r+0xb0>
 8004cec:	6822      	ldr	r2, [r4, #0]
 8004cee:	1b52      	subs	r2, r2, r5
 8004cf0:	d41f      	bmi.n	8004d32 <_malloc_r+0xd6>
 8004cf2:	2a0b      	cmp	r2, #11
 8004cf4:	d917      	bls.n	8004d26 <_malloc_r+0xca>
 8004cf6:	1961      	adds	r1, r4, r5
 8004cf8:	42a3      	cmp	r3, r4
 8004cfa:	6025      	str	r5, [r4, #0]
 8004cfc:	bf18      	it	ne
 8004cfe:	6059      	strne	r1, [r3, #4]
 8004d00:	6863      	ldr	r3, [r4, #4]
 8004d02:	bf08      	it	eq
 8004d04:	f8c8 1000 	streq.w	r1, [r8]
 8004d08:	5162      	str	r2, [r4, r5]
 8004d0a:	604b      	str	r3, [r1, #4]
 8004d0c:	4638      	mov	r0, r7
 8004d0e:	f104 060b 	add.w	r6, r4, #11
 8004d12:	f000 f829 	bl	8004d68 <__malloc_unlock>
 8004d16:	f026 0607 	bic.w	r6, r6, #7
 8004d1a:	1d23      	adds	r3, r4, #4
 8004d1c:	1af2      	subs	r2, r6, r3
 8004d1e:	d0ae      	beq.n	8004c7e <_malloc_r+0x22>
 8004d20:	1b9b      	subs	r3, r3, r6
 8004d22:	50a3      	str	r3, [r4, r2]
 8004d24:	e7ab      	b.n	8004c7e <_malloc_r+0x22>
 8004d26:	42a3      	cmp	r3, r4
 8004d28:	6862      	ldr	r2, [r4, #4]
 8004d2a:	d1dd      	bne.n	8004ce8 <_malloc_r+0x8c>
 8004d2c:	f8c8 2000 	str.w	r2, [r8]
 8004d30:	e7ec      	b.n	8004d0c <_malloc_r+0xb0>
 8004d32:	4623      	mov	r3, r4
 8004d34:	6864      	ldr	r4, [r4, #4]
 8004d36:	e7ac      	b.n	8004c92 <_malloc_r+0x36>
 8004d38:	4634      	mov	r4, r6
 8004d3a:	6876      	ldr	r6, [r6, #4]
 8004d3c:	e7b4      	b.n	8004ca8 <_malloc_r+0x4c>
 8004d3e:	4613      	mov	r3, r2
 8004d40:	e7cc      	b.n	8004cdc <_malloc_r+0x80>
 8004d42:	230c      	movs	r3, #12
 8004d44:	603b      	str	r3, [r7, #0]
 8004d46:	4638      	mov	r0, r7
 8004d48:	f000 f80e 	bl	8004d68 <__malloc_unlock>
 8004d4c:	e797      	b.n	8004c7e <_malloc_r+0x22>
 8004d4e:	6025      	str	r5, [r4, #0]
 8004d50:	e7dc      	b.n	8004d0c <_malloc_r+0xb0>
 8004d52:	605b      	str	r3, [r3, #4]
 8004d54:	deff      	udf	#255	; 0xff
 8004d56:	bf00      	nop
 8004d58:	200004c4 	.word	0x200004c4

08004d5c <__malloc_lock>:
 8004d5c:	4801      	ldr	r0, [pc, #4]	; (8004d64 <__malloc_lock+0x8>)
 8004d5e:	f7ff bf00 	b.w	8004b62 <__retarget_lock_acquire_recursive>
 8004d62:	bf00      	nop
 8004d64:	200004c0 	.word	0x200004c0

08004d68 <__malloc_unlock>:
 8004d68:	4801      	ldr	r0, [pc, #4]	; (8004d70 <__malloc_unlock+0x8>)
 8004d6a:	f7ff befb 	b.w	8004b64 <__retarget_lock_release_recursive>
 8004d6e:	bf00      	nop
 8004d70:	200004c0 	.word	0x200004c0

08004d74 <__sfputc_r>:
 8004d74:	6893      	ldr	r3, [r2, #8]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	b410      	push	{r4}
 8004d7c:	6093      	str	r3, [r2, #8]
 8004d7e:	da08      	bge.n	8004d92 <__sfputc_r+0x1e>
 8004d80:	6994      	ldr	r4, [r2, #24]
 8004d82:	42a3      	cmp	r3, r4
 8004d84:	db01      	blt.n	8004d8a <__sfputc_r+0x16>
 8004d86:	290a      	cmp	r1, #10
 8004d88:	d103      	bne.n	8004d92 <__sfputc_r+0x1e>
 8004d8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d8e:	f7ff bdda 	b.w	8004946 <__swbuf_r>
 8004d92:	6813      	ldr	r3, [r2, #0]
 8004d94:	1c58      	adds	r0, r3, #1
 8004d96:	6010      	str	r0, [r2, #0]
 8004d98:	7019      	strb	r1, [r3, #0]
 8004d9a:	4608      	mov	r0, r1
 8004d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <__sfputs_r>:
 8004da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da4:	4606      	mov	r6, r0
 8004da6:	460f      	mov	r7, r1
 8004da8:	4614      	mov	r4, r2
 8004daa:	18d5      	adds	r5, r2, r3
 8004dac:	42ac      	cmp	r4, r5
 8004dae:	d101      	bne.n	8004db4 <__sfputs_r+0x12>
 8004db0:	2000      	movs	r0, #0
 8004db2:	e007      	b.n	8004dc4 <__sfputs_r+0x22>
 8004db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004db8:	463a      	mov	r2, r7
 8004dba:	4630      	mov	r0, r6
 8004dbc:	f7ff ffda 	bl	8004d74 <__sfputc_r>
 8004dc0:	1c43      	adds	r3, r0, #1
 8004dc2:	d1f3      	bne.n	8004dac <__sfputs_r+0xa>
 8004dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004dc8 <_vfiprintf_r>:
 8004dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dcc:	460d      	mov	r5, r1
 8004dce:	b09d      	sub	sp, #116	; 0x74
 8004dd0:	4614      	mov	r4, r2
 8004dd2:	4698      	mov	r8, r3
 8004dd4:	4606      	mov	r6, r0
 8004dd6:	b118      	cbz	r0, 8004de0 <_vfiprintf_r+0x18>
 8004dd8:	6a03      	ldr	r3, [r0, #32]
 8004dda:	b90b      	cbnz	r3, 8004de0 <_vfiprintf_r+0x18>
 8004ddc:	f7ff fc60 	bl	80046a0 <__sinit>
 8004de0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004de2:	07d9      	lsls	r1, r3, #31
 8004de4:	d405      	bmi.n	8004df2 <_vfiprintf_r+0x2a>
 8004de6:	89ab      	ldrh	r3, [r5, #12]
 8004de8:	059a      	lsls	r2, r3, #22
 8004dea:	d402      	bmi.n	8004df2 <_vfiprintf_r+0x2a>
 8004dec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dee:	f7ff feb8 	bl	8004b62 <__retarget_lock_acquire_recursive>
 8004df2:	89ab      	ldrh	r3, [r5, #12]
 8004df4:	071b      	lsls	r3, r3, #28
 8004df6:	d501      	bpl.n	8004dfc <_vfiprintf_r+0x34>
 8004df8:	692b      	ldr	r3, [r5, #16]
 8004dfa:	b99b      	cbnz	r3, 8004e24 <_vfiprintf_r+0x5c>
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	4630      	mov	r0, r6
 8004e00:	f7ff fdde 	bl	80049c0 <__swsetup_r>
 8004e04:	b170      	cbz	r0, 8004e24 <_vfiprintf_r+0x5c>
 8004e06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e08:	07dc      	lsls	r4, r3, #31
 8004e0a:	d504      	bpl.n	8004e16 <_vfiprintf_r+0x4e>
 8004e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e10:	b01d      	add	sp, #116	; 0x74
 8004e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e16:	89ab      	ldrh	r3, [r5, #12]
 8004e18:	0598      	lsls	r0, r3, #22
 8004e1a:	d4f7      	bmi.n	8004e0c <_vfiprintf_r+0x44>
 8004e1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e1e:	f7ff fea1 	bl	8004b64 <__retarget_lock_release_recursive>
 8004e22:	e7f3      	b.n	8004e0c <_vfiprintf_r+0x44>
 8004e24:	2300      	movs	r3, #0
 8004e26:	9309      	str	r3, [sp, #36]	; 0x24
 8004e28:	2320      	movs	r3, #32
 8004e2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e32:	2330      	movs	r3, #48	; 0x30
 8004e34:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004fe8 <_vfiprintf_r+0x220>
 8004e38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e3c:	f04f 0901 	mov.w	r9, #1
 8004e40:	4623      	mov	r3, r4
 8004e42:	469a      	mov	sl, r3
 8004e44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e48:	b10a      	cbz	r2, 8004e4e <_vfiprintf_r+0x86>
 8004e4a:	2a25      	cmp	r2, #37	; 0x25
 8004e4c:	d1f9      	bne.n	8004e42 <_vfiprintf_r+0x7a>
 8004e4e:	ebba 0b04 	subs.w	fp, sl, r4
 8004e52:	d00b      	beq.n	8004e6c <_vfiprintf_r+0xa4>
 8004e54:	465b      	mov	r3, fp
 8004e56:	4622      	mov	r2, r4
 8004e58:	4629      	mov	r1, r5
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	f7ff ffa1 	bl	8004da2 <__sfputs_r>
 8004e60:	3001      	adds	r0, #1
 8004e62:	f000 80a9 	beq.w	8004fb8 <_vfiprintf_r+0x1f0>
 8004e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e68:	445a      	add	r2, fp
 8004e6a:	9209      	str	r2, [sp, #36]	; 0x24
 8004e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 80a1 	beq.w	8004fb8 <_vfiprintf_r+0x1f0>
 8004e76:	2300      	movs	r3, #0
 8004e78:	f04f 32ff 	mov.w	r2, #4294967295
 8004e7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e80:	f10a 0a01 	add.w	sl, sl, #1
 8004e84:	9304      	str	r3, [sp, #16]
 8004e86:	9307      	str	r3, [sp, #28]
 8004e88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e8c:	931a      	str	r3, [sp, #104]	; 0x68
 8004e8e:	4654      	mov	r4, sl
 8004e90:	2205      	movs	r2, #5
 8004e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e96:	4854      	ldr	r0, [pc, #336]	; (8004fe8 <_vfiprintf_r+0x220>)
 8004e98:	f7fb f9ba 	bl	8000210 <memchr>
 8004e9c:	9a04      	ldr	r2, [sp, #16]
 8004e9e:	b9d8      	cbnz	r0, 8004ed8 <_vfiprintf_r+0x110>
 8004ea0:	06d1      	lsls	r1, r2, #27
 8004ea2:	bf44      	itt	mi
 8004ea4:	2320      	movmi	r3, #32
 8004ea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eaa:	0713      	lsls	r3, r2, #28
 8004eac:	bf44      	itt	mi
 8004eae:	232b      	movmi	r3, #43	; 0x2b
 8004eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8004eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8004eba:	d015      	beq.n	8004ee8 <_vfiprintf_r+0x120>
 8004ebc:	9a07      	ldr	r2, [sp, #28]
 8004ebe:	4654      	mov	r4, sl
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	f04f 0c0a 	mov.w	ip, #10
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ecc:	3b30      	subs	r3, #48	; 0x30
 8004ece:	2b09      	cmp	r3, #9
 8004ed0:	d94d      	bls.n	8004f6e <_vfiprintf_r+0x1a6>
 8004ed2:	b1b0      	cbz	r0, 8004f02 <_vfiprintf_r+0x13a>
 8004ed4:	9207      	str	r2, [sp, #28]
 8004ed6:	e014      	b.n	8004f02 <_vfiprintf_r+0x13a>
 8004ed8:	eba0 0308 	sub.w	r3, r0, r8
 8004edc:	fa09 f303 	lsl.w	r3, r9, r3
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	9304      	str	r3, [sp, #16]
 8004ee4:	46a2      	mov	sl, r4
 8004ee6:	e7d2      	b.n	8004e8e <_vfiprintf_r+0xc6>
 8004ee8:	9b03      	ldr	r3, [sp, #12]
 8004eea:	1d19      	adds	r1, r3, #4
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	9103      	str	r1, [sp, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	bfbb      	ittet	lt
 8004ef4:	425b      	neglt	r3, r3
 8004ef6:	f042 0202 	orrlt.w	r2, r2, #2
 8004efa:	9307      	strge	r3, [sp, #28]
 8004efc:	9307      	strlt	r3, [sp, #28]
 8004efe:	bfb8      	it	lt
 8004f00:	9204      	strlt	r2, [sp, #16]
 8004f02:	7823      	ldrb	r3, [r4, #0]
 8004f04:	2b2e      	cmp	r3, #46	; 0x2e
 8004f06:	d10c      	bne.n	8004f22 <_vfiprintf_r+0x15a>
 8004f08:	7863      	ldrb	r3, [r4, #1]
 8004f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f0c:	d134      	bne.n	8004f78 <_vfiprintf_r+0x1b0>
 8004f0e:	9b03      	ldr	r3, [sp, #12]
 8004f10:	1d1a      	adds	r2, r3, #4
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	9203      	str	r2, [sp, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	bfb8      	it	lt
 8004f1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f1e:	3402      	adds	r4, #2
 8004f20:	9305      	str	r3, [sp, #20]
 8004f22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004ff8 <_vfiprintf_r+0x230>
 8004f26:	7821      	ldrb	r1, [r4, #0]
 8004f28:	2203      	movs	r2, #3
 8004f2a:	4650      	mov	r0, sl
 8004f2c:	f7fb f970 	bl	8000210 <memchr>
 8004f30:	b138      	cbz	r0, 8004f42 <_vfiprintf_r+0x17a>
 8004f32:	9b04      	ldr	r3, [sp, #16]
 8004f34:	eba0 000a 	sub.w	r0, r0, sl
 8004f38:	2240      	movs	r2, #64	; 0x40
 8004f3a:	4082      	lsls	r2, r0
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	3401      	adds	r4, #1
 8004f40:	9304      	str	r3, [sp, #16]
 8004f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f46:	4829      	ldr	r0, [pc, #164]	; (8004fec <_vfiprintf_r+0x224>)
 8004f48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f4c:	2206      	movs	r2, #6
 8004f4e:	f7fb f95f 	bl	8000210 <memchr>
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d03f      	beq.n	8004fd6 <_vfiprintf_r+0x20e>
 8004f56:	4b26      	ldr	r3, [pc, #152]	; (8004ff0 <_vfiprintf_r+0x228>)
 8004f58:	bb1b      	cbnz	r3, 8004fa2 <_vfiprintf_r+0x1da>
 8004f5a:	9b03      	ldr	r3, [sp, #12]
 8004f5c:	3307      	adds	r3, #7
 8004f5e:	f023 0307 	bic.w	r3, r3, #7
 8004f62:	3308      	adds	r3, #8
 8004f64:	9303      	str	r3, [sp, #12]
 8004f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f68:	443b      	add	r3, r7
 8004f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f6c:	e768      	b.n	8004e40 <_vfiprintf_r+0x78>
 8004f6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f72:	460c      	mov	r4, r1
 8004f74:	2001      	movs	r0, #1
 8004f76:	e7a6      	b.n	8004ec6 <_vfiprintf_r+0xfe>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	3401      	adds	r4, #1
 8004f7c:	9305      	str	r3, [sp, #20]
 8004f7e:	4619      	mov	r1, r3
 8004f80:	f04f 0c0a 	mov.w	ip, #10
 8004f84:	4620      	mov	r0, r4
 8004f86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f8a:	3a30      	subs	r2, #48	; 0x30
 8004f8c:	2a09      	cmp	r2, #9
 8004f8e:	d903      	bls.n	8004f98 <_vfiprintf_r+0x1d0>
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0c6      	beq.n	8004f22 <_vfiprintf_r+0x15a>
 8004f94:	9105      	str	r1, [sp, #20]
 8004f96:	e7c4      	b.n	8004f22 <_vfiprintf_r+0x15a>
 8004f98:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f9c:	4604      	mov	r4, r0
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e7f0      	b.n	8004f84 <_vfiprintf_r+0x1bc>
 8004fa2:	ab03      	add	r3, sp, #12
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	462a      	mov	r2, r5
 8004fa8:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <_vfiprintf_r+0x22c>)
 8004faa:	a904      	add	r1, sp, #16
 8004fac:	4630      	mov	r0, r6
 8004fae:	f3af 8000 	nop.w
 8004fb2:	4607      	mov	r7, r0
 8004fb4:	1c78      	adds	r0, r7, #1
 8004fb6:	d1d6      	bne.n	8004f66 <_vfiprintf_r+0x19e>
 8004fb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fba:	07d9      	lsls	r1, r3, #31
 8004fbc:	d405      	bmi.n	8004fca <_vfiprintf_r+0x202>
 8004fbe:	89ab      	ldrh	r3, [r5, #12]
 8004fc0:	059a      	lsls	r2, r3, #22
 8004fc2:	d402      	bmi.n	8004fca <_vfiprintf_r+0x202>
 8004fc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fc6:	f7ff fdcd 	bl	8004b64 <__retarget_lock_release_recursive>
 8004fca:	89ab      	ldrh	r3, [r5, #12]
 8004fcc:	065b      	lsls	r3, r3, #25
 8004fce:	f53f af1d 	bmi.w	8004e0c <_vfiprintf_r+0x44>
 8004fd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fd4:	e71c      	b.n	8004e10 <_vfiprintf_r+0x48>
 8004fd6:	ab03      	add	r3, sp, #12
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	462a      	mov	r2, r5
 8004fdc:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <_vfiprintf_r+0x22c>)
 8004fde:	a904      	add	r1, sp, #16
 8004fe0:	4630      	mov	r0, r6
 8004fe2:	f000 f879 	bl	80050d8 <_printf_i>
 8004fe6:	e7e4      	b.n	8004fb2 <_vfiprintf_r+0x1ea>
 8004fe8:	08005731 	.word	0x08005731
 8004fec:	0800573b 	.word	0x0800573b
 8004ff0:	00000000 	.word	0x00000000
 8004ff4:	08004da3 	.word	0x08004da3
 8004ff8:	08005737 	.word	0x08005737

08004ffc <_printf_common>:
 8004ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005000:	4616      	mov	r6, r2
 8005002:	4699      	mov	r9, r3
 8005004:	688a      	ldr	r2, [r1, #8]
 8005006:	690b      	ldr	r3, [r1, #16]
 8005008:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800500c:	4293      	cmp	r3, r2
 800500e:	bfb8      	it	lt
 8005010:	4613      	movlt	r3, r2
 8005012:	6033      	str	r3, [r6, #0]
 8005014:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005018:	4607      	mov	r7, r0
 800501a:	460c      	mov	r4, r1
 800501c:	b10a      	cbz	r2, 8005022 <_printf_common+0x26>
 800501e:	3301      	adds	r3, #1
 8005020:	6033      	str	r3, [r6, #0]
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	0699      	lsls	r1, r3, #26
 8005026:	bf42      	ittt	mi
 8005028:	6833      	ldrmi	r3, [r6, #0]
 800502a:	3302      	addmi	r3, #2
 800502c:	6033      	strmi	r3, [r6, #0]
 800502e:	6825      	ldr	r5, [r4, #0]
 8005030:	f015 0506 	ands.w	r5, r5, #6
 8005034:	d106      	bne.n	8005044 <_printf_common+0x48>
 8005036:	f104 0a19 	add.w	sl, r4, #25
 800503a:	68e3      	ldr	r3, [r4, #12]
 800503c:	6832      	ldr	r2, [r6, #0]
 800503e:	1a9b      	subs	r3, r3, r2
 8005040:	42ab      	cmp	r3, r5
 8005042:	dc26      	bgt.n	8005092 <_printf_common+0x96>
 8005044:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005048:	1e13      	subs	r3, r2, #0
 800504a:	6822      	ldr	r2, [r4, #0]
 800504c:	bf18      	it	ne
 800504e:	2301      	movne	r3, #1
 8005050:	0692      	lsls	r2, r2, #26
 8005052:	d42b      	bmi.n	80050ac <_printf_common+0xb0>
 8005054:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005058:	4649      	mov	r1, r9
 800505a:	4638      	mov	r0, r7
 800505c:	47c0      	blx	r8
 800505e:	3001      	adds	r0, #1
 8005060:	d01e      	beq.n	80050a0 <_printf_common+0xa4>
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	6922      	ldr	r2, [r4, #16]
 8005066:	f003 0306 	and.w	r3, r3, #6
 800506a:	2b04      	cmp	r3, #4
 800506c:	bf02      	ittt	eq
 800506e:	68e5      	ldreq	r5, [r4, #12]
 8005070:	6833      	ldreq	r3, [r6, #0]
 8005072:	1aed      	subeq	r5, r5, r3
 8005074:	68a3      	ldr	r3, [r4, #8]
 8005076:	bf0c      	ite	eq
 8005078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800507c:	2500      	movne	r5, #0
 800507e:	4293      	cmp	r3, r2
 8005080:	bfc4      	itt	gt
 8005082:	1a9b      	subgt	r3, r3, r2
 8005084:	18ed      	addgt	r5, r5, r3
 8005086:	2600      	movs	r6, #0
 8005088:	341a      	adds	r4, #26
 800508a:	42b5      	cmp	r5, r6
 800508c:	d11a      	bne.n	80050c4 <_printf_common+0xc8>
 800508e:	2000      	movs	r0, #0
 8005090:	e008      	b.n	80050a4 <_printf_common+0xa8>
 8005092:	2301      	movs	r3, #1
 8005094:	4652      	mov	r2, sl
 8005096:	4649      	mov	r1, r9
 8005098:	4638      	mov	r0, r7
 800509a:	47c0      	blx	r8
 800509c:	3001      	adds	r0, #1
 800509e:	d103      	bne.n	80050a8 <_printf_common+0xac>
 80050a0:	f04f 30ff 	mov.w	r0, #4294967295
 80050a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a8:	3501      	adds	r5, #1
 80050aa:	e7c6      	b.n	800503a <_printf_common+0x3e>
 80050ac:	18e1      	adds	r1, r4, r3
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	2030      	movs	r0, #48	; 0x30
 80050b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050b6:	4422      	add	r2, r4
 80050b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050c0:	3302      	adds	r3, #2
 80050c2:	e7c7      	b.n	8005054 <_printf_common+0x58>
 80050c4:	2301      	movs	r3, #1
 80050c6:	4622      	mov	r2, r4
 80050c8:	4649      	mov	r1, r9
 80050ca:	4638      	mov	r0, r7
 80050cc:	47c0      	blx	r8
 80050ce:	3001      	adds	r0, #1
 80050d0:	d0e6      	beq.n	80050a0 <_printf_common+0xa4>
 80050d2:	3601      	adds	r6, #1
 80050d4:	e7d9      	b.n	800508a <_printf_common+0x8e>
	...

080050d8 <_printf_i>:
 80050d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050dc:	7e0f      	ldrb	r7, [r1, #24]
 80050de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050e0:	2f78      	cmp	r7, #120	; 0x78
 80050e2:	4691      	mov	r9, r2
 80050e4:	4680      	mov	r8, r0
 80050e6:	460c      	mov	r4, r1
 80050e8:	469a      	mov	sl, r3
 80050ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050ee:	d807      	bhi.n	8005100 <_printf_i+0x28>
 80050f0:	2f62      	cmp	r7, #98	; 0x62
 80050f2:	d80a      	bhi.n	800510a <_printf_i+0x32>
 80050f4:	2f00      	cmp	r7, #0
 80050f6:	f000 80d4 	beq.w	80052a2 <_printf_i+0x1ca>
 80050fa:	2f58      	cmp	r7, #88	; 0x58
 80050fc:	f000 80c0 	beq.w	8005280 <_printf_i+0x1a8>
 8005100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005104:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005108:	e03a      	b.n	8005180 <_printf_i+0xa8>
 800510a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800510e:	2b15      	cmp	r3, #21
 8005110:	d8f6      	bhi.n	8005100 <_printf_i+0x28>
 8005112:	a101      	add	r1, pc, #4	; (adr r1, 8005118 <_printf_i+0x40>)
 8005114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005118:	08005171 	.word	0x08005171
 800511c:	08005185 	.word	0x08005185
 8005120:	08005101 	.word	0x08005101
 8005124:	08005101 	.word	0x08005101
 8005128:	08005101 	.word	0x08005101
 800512c:	08005101 	.word	0x08005101
 8005130:	08005185 	.word	0x08005185
 8005134:	08005101 	.word	0x08005101
 8005138:	08005101 	.word	0x08005101
 800513c:	08005101 	.word	0x08005101
 8005140:	08005101 	.word	0x08005101
 8005144:	08005289 	.word	0x08005289
 8005148:	080051b1 	.word	0x080051b1
 800514c:	08005243 	.word	0x08005243
 8005150:	08005101 	.word	0x08005101
 8005154:	08005101 	.word	0x08005101
 8005158:	080052ab 	.word	0x080052ab
 800515c:	08005101 	.word	0x08005101
 8005160:	080051b1 	.word	0x080051b1
 8005164:	08005101 	.word	0x08005101
 8005168:	08005101 	.word	0x08005101
 800516c:	0800524b 	.word	0x0800524b
 8005170:	682b      	ldr	r3, [r5, #0]
 8005172:	1d1a      	adds	r2, r3, #4
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	602a      	str	r2, [r5, #0]
 8005178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800517c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005180:	2301      	movs	r3, #1
 8005182:	e09f      	b.n	80052c4 <_printf_i+0x1ec>
 8005184:	6820      	ldr	r0, [r4, #0]
 8005186:	682b      	ldr	r3, [r5, #0]
 8005188:	0607      	lsls	r7, r0, #24
 800518a:	f103 0104 	add.w	r1, r3, #4
 800518e:	6029      	str	r1, [r5, #0]
 8005190:	d501      	bpl.n	8005196 <_printf_i+0xbe>
 8005192:	681e      	ldr	r6, [r3, #0]
 8005194:	e003      	b.n	800519e <_printf_i+0xc6>
 8005196:	0646      	lsls	r6, r0, #25
 8005198:	d5fb      	bpl.n	8005192 <_printf_i+0xba>
 800519a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800519e:	2e00      	cmp	r6, #0
 80051a0:	da03      	bge.n	80051aa <_printf_i+0xd2>
 80051a2:	232d      	movs	r3, #45	; 0x2d
 80051a4:	4276      	negs	r6, r6
 80051a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051aa:	485a      	ldr	r0, [pc, #360]	; (8005314 <_printf_i+0x23c>)
 80051ac:	230a      	movs	r3, #10
 80051ae:	e012      	b.n	80051d6 <_printf_i+0xfe>
 80051b0:	682b      	ldr	r3, [r5, #0]
 80051b2:	6820      	ldr	r0, [r4, #0]
 80051b4:	1d19      	adds	r1, r3, #4
 80051b6:	6029      	str	r1, [r5, #0]
 80051b8:	0605      	lsls	r5, r0, #24
 80051ba:	d501      	bpl.n	80051c0 <_printf_i+0xe8>
 80051bc:	681e      	ldr	r6, [r3, #0]
 80051be:	e002      	b.n	80051c6 <_printf_i+0xee>
 80051c0:	0641      	lsls	r1, r0, #25
 80051c2:	d5fb      	bpl.n	80051bc <_printf_i+0xe4>
 80051c4:	881e      	ldrh	r6, [r3, #0]
 80051c6:	4853      	ldr	r0, [pc, #332]	; (8005314 <_printf_i+0x23c>)
 80051c8:	2f6f      	cmp	r7, #111	; 0x6f
 80051ca:	bf0c      	ite	eq
 80051cc:	2308      	moveq	r3, #8
 80051ce:	230a      	movne	r3, #10
 80051d0:	2100      	movs	r1, #0
 80051d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051d6:	6865      	ldr	r5, [r4, #4]
 80051d8:	60a5      	str	r5, [r4, #8]
 80051da:	2d00      	cmp	r5, #0
 80051dc:	bfa2      	ittt	ge
 80051de:	6821      	ldrge	r1, [r4, #0]
 80051e0:	f021 0104 	bicge.w	r1, r1, #4
 80051e4:	6021      	strge	r1, [r4, #0]
 80051e6:	b90e      	cbnz	r6, 80051ec <_printf_i+0x114>
 80051e8:	2d00      	cmp	r5, #0
 80051ea:	d04b      	beq.n	8005284 <_printf_i+0x1ac>
 80051ec:	4615      	mov	r5, r2
 80051ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80051f2:	fb03 6711 	mls	r7, r3, r1, r6
 80051f6:	5dc7      	ldrb	r7, [r0, r7]
 80051f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80051fc:	4637      	mov	r7, r6
 80051fe:	42bb      	cmp	r3, r7
 8005200:	460e      	mov	r6, r1
 8005202:	d9f4      	bls.n	80051ee <_printf_i+0x116>
 8005204:	2b08      	cmp	r3, #8
 8005206:	d10b      	bne.n	8005220 <_printf_i+0x148>
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	07de      	lsls	r6, r3, #31
 800520c:	d508      	bpl.n	8005220 <_printf_i+0x148>
 800520e:	6923      	ldr	r3, [r4, #16]
 8005210:	6861      	ldr	r1, [r4, #4]
 8005212:	4299      	cmp	r1, r3
 8005214:	bfde      	ittt	le
 8005216:	2330      	movle	r3, #48	; 0x30
 8005218:	f805 3c01 	strble.w	r3, [r5, #-1]
 800521c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005220:	1b52      	subs	r2, r2, r5
 8005222:	6122      	str	r2, [r4, #16]
 8005224:	f8cd a000 	str.w	sl, [sp]
 8005228:	464b      	mov	r3, r9
 800522a:	aa03      	add	r2, sp, #12
 800522c:	4621      	mov	r1, r4
 800522e:	4640      	mov	r0, r8
 8005230:	f7ff fee4 	bl	8004ffc <_printf_common>
 8005234:	3001      	adds	r0, #1
 8005236:	d14a      	bne.n	80052ce <_printf_i+0x1f6>
 8005238:	f04f 30ff 	mov.w	r0, #4294967295
 800523c:	b004      	add	sp, #16
 800523e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	f043 0320 	orr.w	r3, r3, #32
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	4833      	ldr	r0, [pc, #204]	; (8005318 <_printf_i+0x240>)
 800524c:	2778      	movs	r7, #120	; 0x78
 800524e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	6829      	ldr	r1, [r5, #0]
 8005256:	061f      	lsls	r7, r3, #24
 8005258:	f851 6b04 	ldr.w	r6, [r1], #4
 800525c:	d402      	bmi.n	8005264 <_printf_i+0x18c>
 800525e:	065f      	lsls	r7, r3, #25
 8005260:	bf48      	it	mi
 8005262:	b2b6      	uxthmi	r6, r6
 8005264:	07df      	lsls	r7, r3, #31
 8005266:	bf48      	it	mi
 8005268:	f043 0320 	orrmi.w	r3, r3, #32
 800526c:	6029      	str	r1, [r5, #0]
 800526e:	bf48      	it	mi
 8005270:	6023      	strmi	r3, [r4, #0]
 8005272:	b91e      	cbnz	r6, 800527c <_printf_i+0x1a4>
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	f023 0320 	bic.w	r3, r3, #32
 800527a:	6023      	str	r3, [r4, #0]
 800527c:	2310      	movs	r3, #16
 800527e:	e7a7      	b.n	80051d0 <_printf_i+0xf8>
 8005280:	4824      	ldr	r0, [pc, #144]	; (8005314 <_printf_i+0x23c>)
 8005282:	e7e4      	b.n	800524e <_printf_i+0x176>
 8005284:	4615      	mov	r5, r2
 8005286:	e7bd      	b.n	8005204 <_printf_i+0x12c>
 8005288:	682b      	ldr	r3, [r5, #0]
 800528a:	6826      	ldr	r6, [r4, #0]
 800528c:	6961      	ldr	r1, [r4, #20]
 800528e:	1d18      	adds	r0, r3, #4
 8005290:	6028      	str	r0, [r5, #0]
 8005292:	0635      	lsls	r5, r6, #24
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	d501      	bpl.n	800529c <_printf_i+0x1c4>
 8005298:	6019      	str	r1, [r3, #0]
 800529a:	e002      	b.n	80052a2 <_printf_i+0x1ca>
 800529c:	0670      	lsls	r0, r6, #25
 800529e:	d5fb      	bpl.n	8005298 <_printf_i+0x1c0>
 80052a0:	8019      	strh	r1, [r3, #0]
 80052a2:	2300      	movs	r3, #0
 80052a4:	6123      	str	r3, [r4, #16]
 80052a6:	4615      	mov	r5, r2
 80052a8:	e7bc      	b.n	8005224 <_printf_i+0x14c>
 80052aa:	682b      	ldr	r3, [r5, #0]
 80052ac:	1d1a      	adds	r2, r3, #4
 80052ae:	602a      	str	r2, [r5, #0]
 80052b0:	681d      	ldr	r5, [r3, #0]
 80052b2:	6862      	ldr	r2, [r4, #4]
 80052b4:	2100      	movs	r1, #0
 80052b6:	4628      	mov	r0, r5
 80052b8:	f7fa ffaa 	bl	8000210 <memchr>
 80052bc:	b108      	cbz	r0, 80052c2 <_printf_i+0x1ea>
 80052be:	1b40      	subs	r0, r0, r5
 80052c0:	6060      	str	r0, [r4, #4]
 80052c2:	6863      	ldr	r3, [r4, #4]
 80052c4:	6123      	str	r3, [r4, #16]
 80052c6:	2300      	movs	r3, #0
 80052c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052cc:	e7aa      	b.n	8005224 <_printf_i+0x14c>
 80052ce:	6923      	ldr	r3, [r4, #16]
 80052d0:	462a      	mov	r2, r5
 80052d2:	4649      	mov	r1, r9
 80052d4:	4640      	mov	r0, r8
 80052d6:	47d0      	blx	sl
 80052d8:	3001      	adds	r0, #1
 80052da:	d0ad      	beq.n	8005238 <_printf_i+0x160>
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	079b      	lsls	r3, r3, #30
 80052e0:	d413      	bmi.n	800530a <_printf_i+0x232>
 80052e2:	68e0      	ldr	r0, [r4, #12]
 80052e4:	9b03      	ldr	r3, [sp, #12]
 80052e6:	4298      	cmp	r0, r3
 80052e8:	bfb8      	it	lt
 80052ea:	4618      	movlt	r0, r3
 80052ec:	e7a6      	b.n	800523c <_printf_i+0x164>
 80052ee:	2301      	movs	r3, #1
 80052f0:	4632      	mov	r2, r6
 80052f2:	4649      	mov	r1, r9
 80052f4:	4640      	mov	r0, r8
 80052f6:	47d0      	blx	sl
 80052f8:	3001      	adds	r0, #1
 80052fa:	d09d      	beq.n	8005238 <_printf_i+0x160>
 80052fc:	3501      	adds	r5, #1
 80052fe:	68e3      	ldr	r3, [r4, #12]
 8005300:	9903      	ldr	r1, [sp, #12]
 8005302:	1a5b      	subs	r3, r3, r1
 8005304:	42ab      	cmp	r3, r5
 8005306:	dcf2      	bgt.n	80052ee <_printf_i+0x216>
 8005308:	e7eb      	b.n	80052e2 <_printf_i+0x20a>
 800530a:	2500      	movs	r5, #0
 800530c:	f104 0619 	add.w	r6, r4, #25
 8005310:	e7f5      	b.n	80052fe <_printf_i+0x226>
 8005312:	bf00      	nop
 8005314:	08005742 	.word	0x08005742
 8005318:	08005753 	.word	0x08005753

0800531c <__sflush_r>:
 800531c:	898a      	ldrh	r2, [r1, #12]
 800531e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005322:	4605      	mov	r5, r0
 8005324:	0710      	lsls	r0, r2, #28
 8005326:	460c      	mov	r4, r1
 8005328:	d458      	bmi.n	80053dc <__sflush_r+0xc0>
 800532a:	684b      	ldr	r3, [r1, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	dc05      	bgt.n	800533c <__sflush_r+0x20>
 8005330:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	dc02      	bgt.n	800533c <__sflush_r+0x20>
 8005336:	2000      	movs	r0, #0
 8005338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800533c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800533e:	2e00      	cmp	r6, #0
 8005340:	d0f9      	beq.n	8005336 <__sflush_r+0x1a>
 8005342:	2300      	movs	r3, #0
 8005344:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005348:	682f      	ldr	r7, [r5, #0]
 800534a:	6a21      	ldr	r1, [r4, #32]
 800534c:	602b      	str	r3, [r5, #0]
 800534e:	d032      	beq.n	80053b6 <__sflush_r+0x9a>
 8005350:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005352:	89a3      	ldrh	r3, [r4, #12]
 8005354:	075a      	lsls	r2, r3, #29
 8005356:	d505      	bpl.n	8005364 <__sflush_r+0x48>
 8005358:	6863      	ldr	r3, [r4, #4]
 800535a:	1ac0      	subs	r0, r0, r3
 800535c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800535e:	b10b      	cbz	r3, 8005364 <__sflush_r+0x48>
 8005360:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005362:	1ac0      	subs	r0, r0, r3
 8005364:	2300      	movs	r3, #0
 8005366:	4602      	mov	r2, r0
 8005368:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800536a:	6a21      	ldr	r1, [r4, #32]
 800536c:	4628      	mov	r0, r5
 800536e:	47b0      	blx	r6
 8005370:	1c43      	adds	r3, r0, #1
 8005372:	89a3      	ldrh	r3, [r4, #12]
 8005374:	d106      	bne.n	8005384 <__sflush_r+0x68>
 8005376:	6829      	ldr	r1, [r5, #0]
 8005378:	291d      	cmp	r1, #29
 800537a:	d82b      	bhi.n	80053d4 <__sflush_r+0xb8>
 800537c:	4a29      	ldr	r2, [pc, #164]	; (8005424 <__sflush_r+0x108>)
 800537e:	410a      	asrs	r2, r1
 8005380:	07d6      	lsls	r6, r2, #31
 8005382:	d427      	bmi.n	80053d4 <__sflush_r+0xb8>
 8005384:	2200      	movs	r2, #0
 8005386:	6062      	str	r2, [r4, #4]
 8005388:	04d9      	lsls	r1, r3, #19
 800538a:	6922      	ldr	r2, [r4, #16]
 800538c:	6022      	str	r2, [r4, #0]
 800538e:	d504      	bpl.n	800539a <__sflush_r+0x7e>
 8005390:	1c42      	adds	r2, r0, #1
 8005392:	d101      	bne.n	8005398 <__sflush_r+0x7c>
 8005394:	682b      	ldr	r3, [r5, #0]
 8005396:	b903      	cbnz	r3, 800539a <__sflush_r+0x7e>
 8005398:	6560      	str	r0, [r4, #84]	; 0x54
 800539a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800539c:	602f      	str	r7, [r5, #0]
 800539e:	2900      	cmp	r1, #0
 80053a0:	d0c9      	beq.n	8005336 <__sflush_r+0x1a>
 80053a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053a6:	4299      	cmp	r1, r3
 80053a8:	d002      	beq.n	80053b0 <__sflush_r+0x94>
 80053aa:	4628      	mov	r0, r5
 80053ac:	f7ff fbea 	bl	8004b84 <_free_r>
 80053b0:	2000      	movs	r0, #0
 80053b2:	6360      	str	r0, [r4, #52]	; 0x34
 80053b4:	e7c0      	b.n	8005338 <__sflush_r+0x1c>
 80053b6:	2301      	movs	r3, #1
 80053b8:	4628      	mov	r0, r5
 80053ba:	47b0      	blx	r6
 80053bc:	1c41      	adds	r1, r0, #1
 80053be:	d1c8      	bne.n	8005352 <__sflush_r+0x36>
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0c5      	beq.n	8005352 <__sflush_r+0x36>
 80053c6:	2b1d      	cmp	r3, #29
 80053c8:	d001      	beq.n	80053ce <__sflush_r+0xb2>
 80053ca:	2b16      	cmp	r3, #22
 80053cc:	d101      	bne.n	80053d2 <__sflush_r+0xb6>
 80053ce:	602f      	str	r7, [r5, #0]
 80053d0:	e7b1      	b.n	8005336 <__sflush_r+0x1a>
 80053d2:	89a3      	ldrh	r3, [r4, #12]
 80053d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053d8:	81a3      	strh	r3, [r4, #12]
 80053da:	e7ad      	b.n	8005338 <__sflush_r+0x1c>
 80053dc:	690f      	ldr	r7, [r1, #16]
 80053de:	2f00      	cmp	r7, #0
 80053e0:	d0a9      	beq.n	8005336 <__sflush_r+0x1a>
 80053e2:	0793      	lsls	r3, r2, #30
 80053e4:	680e      	ldr	r6, [r1, #0]
 80053e6:	bf08      	it	eq
 80053e8:	694b      	ldreq	r3, [r1, #20]
 80053ea:	600f      	str	r7, [r1, #0]
 80053ec:	bf18      	it	ne
 80053ee:	2300      	movne	r3, #0
 80053f0:	eba6 0807 	sub.w	r8, r6, r7
 80053f4:	608b      	str	r3, [r1, #8]
 80053f6:	f1b8 0f00 	cmp.w	r8, #0
 80053fa:	dd9c      	ble.n	8005336 <__sflush_r+0x1a>
 80053fc:	6a21      	ldr	r1, [r4, #32]
 80053fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005400:	4643      	mov	r3, r8
 8005402:	463a      	mov	r2, r7
 8005404:	4628      	mov	r0, r5
 8005406:	47b0      	blx	r6
 8005408:	2800      	cmp	r0, #0
 800540a:	dc06      	bgt.n	800541a <__sflush_r+0xfe>
 800540c:	89a3      	ldrh	r3, [r4, #12]
 800540e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005412:	81a3      	strh	r3, [r4, #12]
 8005414:	f04f 30ff 	mov.w	r0, #4294967295
 8005418:	e78e      	b.n	8005338 <__sflush_r+0x1c>
 800541a:	4407      	add	r7, r0
 800541c:	eba8 0800 	sub.w	r8, r8, r0
 8005420:	e7e9      	b.n	80053f6 <__sflush_r+0xda>
 8005422:	bf00      	nop
 8005424:	dfbffffe 	.word	0xdfbffffe

08005428 <_fflush_r>:
 8005428:	b538      	push	{r3, r4, r5, lr}
 800542a:	690b      	ldr	r3, [r1, #16]
 800542c:	4605      	mov	r5, r0
 800542e:	460c      	mov	r4, r1
 8005430:	b913      	cbnz	r3, 8005438 <_fflush_r+0x10>
 8005432:	2500      	movs	r5, #0
 8005434:	4628      	mov	r0, r5
 8005436:	bd38      	pop	{r3, r4, r5, pc}
 8005438:	b118      	cbz	r0, 8005442 <_fflush_r+0x1a>
 800543a:	6a03      	ldr	r3, [r0, #32]
 800543c:	b90b      	cbnz	r3, 8005442 <_fflush_r+0x1a>
 800543e:	f7ff f92f 	bl	80046a0 <__sinit>
 8005442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d0f3      	beq.n	8005432 <_fflush_r+0xa>
 800544a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800544c:	07d0      	lsls	r0, r2, #31
 800544e:	d404      	bmi.n	800545a <_fflush_r+0x32>
 8005450:	0599      	lsls	r1, r3, #22
 8005452:	d402      	bmi.n	800545a <_fflush_r+0x32>
 8005454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005456:	f7ff fb84 	bl	8004b62 <__retarget_lock_acquire_recursive>
 800545a:	4628      	mov	r0, r5
 800545c:	4621      	mov	r1, r4
 800545e:	f7ff ff5d 	bl	800531c <__sflush_r>
 8005462:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005464:	07da      	lsls	r2, r3, #31
 8005466:	4605      	mov	r5, r0
 8005468:	d4e4      	bmi.n	8005434 <_fflush_r+0xc>
 800546a:	89a3      	ldrh	r3, [r4, #12]
 800546c:	059b      	lsls	r3, r3, #22
 800546e:	d4e1      	bmi.n	8005434 <_fflush_r+0xc>
 8005470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005472:	f7ff fb77 	bl	8004b64 <__retarget_lock_release_recursive>
 8005476:	e7dd      	b.n	8005434 <_fflush_r+0xc>

08005478 <__swhatbuf_r>:
 8005478:	b570      	push	{r4, r5, r6, lr}
 800547a:	460c      	mov	r4, r1
 800547c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005480:	2900      	cmp	r1, #0
 8005482:	b096      	sub	sp, #88	; 0x58
 8005484:	4615      	mov	r5, r2
 8005486:	461e      	mov	r6, r3
 8005488:	da0d      	bge.n	80054a6 <__swhatbuf_r+0x2e>
 800548a:	89a3      	ldrh	r3, [r4, #12]
 800548c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005490:	f04f 0100 	mov.w	r1, #0
 8005494:	bf0c      	ite	eq
 8005496:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800549a:	2340      	movne	r3, #64	; 0x40
 800549c:	2000      	movs	r0, #0
 800549e:	6031      	str	r1, [r6, #0]
 80054a0:	602b      	str	r3, [r5, #0]
 80054a2:	b016      	add	sp, #88	; 0x58
 80054a4:	bd70      	pop	{r4, r5, r6, pc}
 80054a6:	466a      	mov	r2, sp
 80054a8:	f000 f848 	bl	800553c <_fstat_r>
 80054ac:	2800      	cmp	r0, #0
 80054ae:	dbec      	blt.n	800548a <__swhatbuf_r+0x12>
 80054b0:	9901      	ldr	r1, [sp, #4]
 80054b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80054b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80054ba:	4259      	negs	r1, r3
 80054bc:	4159      	adcs	r1, r3
 80054be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054c2:	e7eb      	b.n	800549c <__swhatbuf_r+0x24>

080054c4 <__smakebuf_r>:
 80054c4:	898b      	ldrh	r3, [r1, #12]
 80054c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80054c8:	079d      	lsls	r5, r3, #30
 80054ca:	4606      	mov	r6, r0
 80054cc:	460c      	mov	r4, r1
 80054ce:	d507      	bpl.n	80054e0 <__smakebuf_r+0x1c>
 80054d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80054d4:	6023      	str	r3, [r4, #0]
 80054d6:	6123      	str	r3, [r4, #16]
 80054d8:	2301      	movs	r3, #1
 80054da:	6163      	str	r3, [r4, #20]
 80054dc:	b002      	add	sp, #8
 80054de:	bd70      	pop	{r4, r5, r6, pc}
 80054e0:	ab01      	add	r3, sp, #4
 80054e2:	466a      	mov	r2, sp
 80054e4:	f7ff ffc8 	bl	8005478 <__swhatbuf_r>
 80054e8:	9900      	ldr	r1, [sp, #0]
 80054ea:	4605      	mov	r5, r0
 80054ec:	4630      	mov	r0, r6
 80054ee:	f7ff fbb5 	bl	8004c5c <_malloc_r>
 80054f2:	b948      	cbnz	r0, 8005508 <__smakebuf_r+0x44>
 80054f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054f8:	059a      	lsls	r2, r3, #22
 80054fa:	d4ef      	bmi.n	80054dc <__smakebuf_r+0x18>
 80054fc:	f023 0303 	bic.w	r3, r3, #3
 8005500:	f043 0302 	orr.w	r3, r3, #2
 8005504:	81a3      	strh	r3, [r4, #12]
 8005506:	e7e3      	b.n	80054d0 <__smakebuf_r+0xc>
 8005508:	89a3      	ldrh	r3, [r4, #12]
 800550a:	6020      	str	r0, [r4, #0]
 800550c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005510:	81a3      	strh	r3, [r4, #12]
 8005512:	9b00      	ldr	r3, [sp, #0]
 8005514:	6163      	str	r3, [r4, #20]
 8005516:	9b01      	ldr	r3, [sp, #4]
 8005518:	6120      	str	r0, [r4, #16]
 800551a:	b15b      	cbz	r3, 8005534 <__smakebuf_r+0x70>
 800551c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005520:	4630      	mov	r0, r6
 8005522:	f000 f81d 	bl	8005560 <_isatty_r>
 8005526:	b128      	cbz	r0, 8005534 <__smakebuf_r+0x70>
 8005528:	89a3      	ldrh	r3, [r4, #12]
 800552a:	f023 0303 	bic.w	r3, r3, #3
 800552e:	f043 0301 	orr.w	r3, r3, #1
 8005532:	81a3      	strh	r3, [r4, #12]
 8005534:	89a3      	ldrh	r3, [r4, #12]
 8005536:	431d      	orrs	r5, r3
 8005538:	81a5      	strh	r5, [r4, #12]
 800553a:	e7cf      	b.n	80054dc <__smakebuf_r+0x18>

0800553c <_fstat_r>:
 800553c:	b538      	push	{r3, r4, r5, lr}
 800553e:	4d07      	ldr	r5, [pc, #28]	; (800555c <_fstat_r+0x20>)
 8005540:	2300      	movs	r3, #0
 8005542:	4604      	mov	r4, r0
 8005544:	4608      	mov	r0, r1
 8005546:	4611      	mov	r1, r2
 8005548:	602b      	str	r3, [r5, #0]
 800554a:	f7fb fd94 	bl	8001076 <_fstat>
 800554e:	1c43      	adds	r3, r0, #1
 8005550:	d102      	bne.n	8005558 <_fstat_r+0x1c>
 8005552:	682b      	ldr	r3, [r5, #0]
 8005554:	b103      	cbz	r3, 8005558 <_fstat_r+0x1c>
 8005556:	6023      	str	r3, [r4, #0]
 8005558:	bd38      	pop	{r3, r4, r5, pc}
 800555a:	bf00      	nop
 800555c:	200004bc 	.word	0x200004bc

08005560 <_isatty_r>:
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	4d06      	ldr	r5, [pc, #24]	; (800557c <_isatty_r+0x1c>)
 8005564:	2300      	movs	r3, #0
 8005566:	4604      	mov	r4, r0
 8005568:	4608      	mov	r0, r1
 800556a:	602b      	str	r3, [r5, #0]
 800556c:	f7fb fd93 	bl	8001096 <_isatty>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	d102      	bne.n	800557a <_isatty_r+0x1a>
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	b103      	cbz	r3, 800557a <_isatty_r+0x1a>
 8005578:	6023      	str	r3, [r4, #0]
 800557a:	bd38      	pop	{r3, r4, r5, pc}
 800557c:	200004bc 	.word	0x200004bc

08005580 <_sbrk_r>:
 8005580:	b538      	push	{r3, r4, r5, lr}
 8005582:	4d06      	ldr	r5, [pc, #24]	; (800559c <_sbrk_r+0x1c>)
 8005584:	2300      	movs	r3, #0
 8005586:	4604      	mov	r4, r0
 8005588:	4608      	mov	r0, r1
 800558a:	602b      	str	r3, [r5, #0]
 800558c:	f7fb fd9c 	bl	80010c8 <_sbrk>
 8005590:	1c43      	adds	r3, r0, #1
 8005592:	d102      	bne.n	800559a <_sbrk_r+0x1a>
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	b103      	cbz	r3, 800559a <_sbrk_r+0x1a>
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	bd38      	pop	{r3, r4, r5, pc}
 800559c:	200004bc 	.word	0x200004bc

080055a0 <_init>:
 80055a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a2:	bf00      	nop
 80055a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a6:	bc08      	pop	{r3}
 80055a8:	469e      	mov	lr, r3
 80055aa:	4770      	bx	lr

080055ac <_fini>:
 80055ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ae:	bf00      	nop
 80055b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055b2:	bc08      	pop	{r3}
 80055b4:	469e      	mov	lr, r3
 80055b6:	4770      	bx	lr
